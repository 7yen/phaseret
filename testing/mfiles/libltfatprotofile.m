function [methodinfo,structs,enuminfo,ThunkLibName]=libltfatprotofile
%LIBLTFATPROTOFILE Create structures to define interfaces found in 'ltfat'.

%This function was generated by loadlibrary.m parser version 1.1.6.38 on Fri Jul 29 11:47:23 2016
%perl options:'ltfat.i -outfile=libltfatprotofile.m -thunkfile=libltfat_thunk_glnxa64.c -header=ltfat.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'libltfat_thunk_glnxa64');
% ltfat_error_handler_t * ltfat_set_error_handler ( ltfat_error_handler_t * new_handler ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_set_error_handler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}={'FcnPtrPtr'};fcnNum=fcnNum+1;
% ltfat_error_handler_t * ltfat_set_error_handler_off ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='ltfat_set_error_handler_off'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtrPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void ltfat_error ( int ltfat_errno , const char * file , int line , const char * funcname , const char * format , ...); 
fcns.name{fcnNum}='ltfat_error'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32', 'cstring', 'cstring', 'error'};fcnNum=fcnNum+1;
% ltfat_library_version * get_ltfat_library_version (); 
fcns.thunkname{fcnNum}='voidPtrThunk';fcns.name{fcnNum}='get_ltfat_library_version'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_library_versionPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% ltfat_memory_handler_t ltfat_set_memory_handler ( ltfat_memory_handler_t new_handler ); 
fcns.thunkname{fcnNum}='ltfat_memory_handler_tltfat_memory_handler_tThunk';fcns.name{fcnNum}='ltfat_set_memory_handler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_memory_handler_t'; fcns.RHS{fcnNum}={'ltfat_memory_handler_t'};fcnNum=fcnNum+1;
% extern void * ltfat_malloc ( size_t n ); 
fcns.thunkname{fcnNum}='voidPtrulongThunk';fcns.name{fcnNum}='ltfat_malloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% extern void * ltfat_calloc ( size_t nmemb , size_t size ); 
fcns.thunkname{fcnNum}='voidPtrulongulongThunk';fcns.name{fcnNum}='ltfat_calloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% extern void * ltfat_realloc ( void * ptr , size_t nold , size_t nnew ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongThunk';fcns.name{fcnNum}='ltfat_realloc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% extern void ltfat_free ( const void * ptr ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_free'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% extern void ltfat_safefree ( const void * ptr ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_safefree'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int ltfat_phaseconvention_is_valid ( ltfat_phaseconvention in ); 
fcns.thunkname{fcnNum}='int32ltfat_phaseconventionThunk';fcns.name{fcnNum}='ltfat_phaseconvention_is_valid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_phaseconvention'};fcnNum=fcnNum+1;
% extern ltfat_div_t ltfat_idiv ( const ltfatInt a , const ltfatInt b ); 
fcns.thunkname{fcnNum}='ltfat_div_tlonglongThunk';fcns.name{fcnNum}='ltfat_idiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_div_t'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
% extern ltfatInt ltfat_gcd ( const ltfatInt a , const ltfatInt b , ltfatInt * r , ltfatInt * s ); 
fcns.thunkname{fcnNum}='longlonglongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_gcd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern void ltfat_fftindex ( const ltfatInt N , ltfatInt * indexout ); 
fcns.thunkname{fcnNum}='voidlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'long', 'longPtr'};fcnNum=fcnNum+1;
% extern ltfatInt makelarger ( const ltfatInt L , const ltfatInt K ); 
fcns.thunkname{fcnNum}='longlonglongThunk';fcns.name{fcnNum}='makelarger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
% extern ltfatInt ltfat_imax ( const ltfatInt a , const ltfatInt b ); 
fcns.thunkname{fcnNum}='longlonglongThunk';fcns.name{fcnNum}='ltfat_imax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
% extern ltfatInt ltfat_imin ( const ltfatInt a , const ltfatInt b ); 
fcns.thunkname{fcnNum}='longlonglongThunk';fcns.name{fcnNum}='ltfat_imin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
% extern ltfatInt ltfat_lcm ( const ltfatInt a , const ltfatInt b ); 
fcns.thunkname{fcnNum}='longlonglongThunk';fcns.name{fcnNum}='ltfat_lcm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
% extern ltfatInt ltfat_dgtlength ( const ltfatInt Ls , const ltfatInt a , const ltfatInt M ); 
fcns.thunkname{fcnNum}='longlonglonglongThunk';fcns.name{fcnNum}='ltfat_dgtlength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long'};fcnNum=fcnNum+1;
% extern void gabimagepars ( const ltfatInt Ls , const ltfatInt x , const ltfatInt y , ltfatInt * a , ltfatInt * M , ltfatInt * L , ltfatInt * N , ltfatInt * Ngood ); 
fcns.thunkname{fcnNum}='voidlonglonglongvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='gabimagepars'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'long', 'long', 'long', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern ltfatInt wfacreal_size ( const ltfatInt L , const ltfatInt a , const ltfatInt M ); 
fcns.thunkname{fcnNum}='longlonglonglongThunk';fcns.name{fcnNum}='wfacreal_size'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long'};fcnNum=fcnNum+1;
% extern ltfatInt ltfat_nextfastfft ( const ltfatInt x ); 
fcns.thunkname{fcnNum}='longlongThunk';fcns.name{fcnNum}='ltfat_nextfastfft'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% extern ltfatInt ltfat_pow2 ( const ltfatInt x ); 
fcns.thunkname{fcnNum}='longlongThunk';fcns.name{fcnNum}='ltfat_pow2'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% extern ltfatInt ltfat_nextpow2 ( const ltfatInt x ); 
fcns.thunkname{fcnNum}='longlongThunk';fcns.name{fcnNum}='ltfat_nextpow2'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% extern ltfatInt ltfat_modpow2 ( const ltfatInt x , const ltfatInt pow2var ); 
fcns.thunkname{fcnNum}='longlonglongThunk';fcns.name{fcnNum}='ltfat_modpow2'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
% extern ltfatInt ltfat_round ( const double x ); 
fcns.thunkname{fcnNum}='longdoubleThunk';fcns.name{fcnNum}='ltfat_round'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
% extern ltfatInt ltfat_positiverem ( const ltfatInt a , const ltfatInt b ); 
fcns.thunkname{fcnNum}='longlonglongThunk';fcns.name{fcnNum}='ltfat_positiverem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
% extern ltfatInt ltfat_rangelimit ( const ltfatInt a , const ltfatInt amin , const ltfatInt amax ); 
fcns.thunkname{fcnNum}='longlonglonglongThunk';fcns.name{fcnNum}='ltfat_rangelimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long'};fcnNum=fcnNum+1;
% extern fbreassOptOut * fbreassOptOut_init ( const ltfatInt l , const ltfatInt inital ); 
fcns.thunkname{fcnNum}='voidPtrlonglongThunk';fcns.name{fcnNum}='fbreassOptOut_init'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fbreassOptOutPtr'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
% extern void fbreassOptOut_expand ( fbreassOptOut * oo , const ltfatInt ii ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongThunk';fcns.name{fcnNum}='fbreassOptOut_expand'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fbreassOptOutPtr', 'long'};fcnNum=fcnNum+1;
% extern void fbreassOptOut_destroy ( fbreassOptOut * oo ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='fbreassOptOut_destroy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fbreassOptOutPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_s ( const float f [], const float g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftwf_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_init_s ( const float f [], const float g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftwf_complex c [], const ltfat_phaseconvention ptype , unsigned flags , ltfat_dgt_long_plan_s ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongvoidPtrltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'ltfat_phaseconvention', 'uint32', 'ltfat_dgt_long_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_execute_s ( ltfat_dgt_long_plan_s * plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_sPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_execute_newarray_s ( ltfat_dgt_long_plan_s * plan , const float f [], fftwf_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_execute_newarray_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_sPtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_done_s ( ltfat_dgt_long_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_walnut_execute_s ( ltfat_dgt_long_plan_s * plan , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_walnut_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_sPtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_s ( const fftwf_complex c [], const float g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftwf_complex f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_init_s ( fftwf_complex c [], const float g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftwf_complex f [], unsigned flags , const ltfat_phaseconvention ptype , ltfat_idgt_long_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongvoidPtruint32ltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'uint32', 'ltfat_phaseconvention', 'ltfat_idgt_long_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_execute_s ( ltfat_idgt_long_plan_s * p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_sPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_execute_newarray_s ( ltfat_idgt_long_plan_s * p , const fftwf_complex c [], fftwf_complex f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_execute_newarray_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_sPtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_done_s ( ltfat_idgt_long_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_idgt_fac_s ( const fftwf_complex * c , const fftwf_complex * gf , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftwf_complex * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fac_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idgt_walnut_execute_s ( ltfat_idgt_long_plan_s * p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_walnut_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_sPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_s ( const float * f , const float * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_init_s ( const float * g , const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , unsigned flags , ltfat_dgt_fb_plan_s ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32', 'ltfat_dgt_fb_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_execute_s ( const ltfat_dgt_fb_plan_s * plan , const float * f , const ltfatInt L , const ltfatInt W , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_fb_plan_sPtr', 'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_done_s ( ltfat_dgt_fb_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_fb_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_s ( const fftwf_complex * cin , const float * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftwf_complex * f ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_init_s ( const float * g , const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , unsigned flags , ltfat_idgt_fb_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32', 'ltfat_idgt_fb_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_execute_s ( ltfat_idgt_fb_plan_s * p , const fftwf_complex * cin , const ltfatInt L , const ltfatInt W , fftwf_complex * f ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_fb_plan_sPtr', 'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_done_s ( ltfat_idgt_fb_plan_s ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_fb_plan_sPtrPtr'};fcnNum=fcnNum+1;
% ltfatExtType ltfatExtStringToEnum ( const char * extType ); 
fcns.thunkname{fcnNum}='ltfatExtTypecstringThunk';fcns.name{fcnNum}='ltfatExtStringToEnum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfatExtType'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% extern ltfatInt filterbank_td_size ( const ltfatInt L , const ltfatInt a , const ltfatInt gl , const ltfatInt offset , const ltfatExtType ext ); 
fcns.thunkname{fcnNum}='longlonglonglonglongltfatExtTypeThunk';fcns.name{fcnNum}='filterbank_td_size'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'long', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_extend_left_s ( const float * in , ltfatInt inLen , float * buffer , ltfatInt buffLen , ltfatInt filtLen , ltfatExtType ext , ltfatInt a ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrlonglongltfatExtTypelongThunk';fcns.name{fcnNum}='ltfat_extend_left_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr', 'long', 'long', 'ltfatExtType', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_extend_right_s ( const float * in , ltfatInt inLen , float * buffer , ltfatInt filtLen , ltfatExtType ext , ltfatInt a ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrlongltfatExtTypelongThunk';fcns.name{fcnNum}='ltfat_extend_right_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr', 'long', 'ltfatExtType', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_td_s ( const float * f , const float * g , const ltfatInt L , const ltfatInt gl , const ltfatInt a , const ltfatInt skip , float * c , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_convsub_td_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_td_s ( const float * c , const float * g , const ltfatInt L , const ltfatInt gl , const ltfatInt a , const ltfatInt skip , float * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_upconv_td_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_filterbank_td_s ( const float * f , const float * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , float * c [], ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_filterbank_td_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'singlePtrPtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_td_s ( const float * c [], const float * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , float * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_ifilterbank_td_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtrPtr', 'singlePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_atrousfilterbank_td_s ( const float * f , const float * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , float * c , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_atrousfilterbank_td_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_iatrousfilterbank_td_s ( const float * c , const float * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , float * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_iatrousfilterbank_td_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_atrousconvsub_td_s ( const float * f , const float * g , const ltfatInt L , const ltfatInt gl , const ltfatInt ga , ltfatInt skip , float * c , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_atrousconvsub_td_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_atrousupconv_td_s ( const float * c , const float * g , const ltfatInt L , const ltfatInt gl , const ltfatInt ga , const ltfatInt skip , float * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_atrousupconv_td_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern ltfat_gga_plan_s ltfat_gga_init_s ( const float * indVecPtr , const ltfatInt M , const ltfatInt L ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrlonglongThunk';fcns.name{fcnNum}='ltfat_gga_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_gga_plan_struct_sPtr'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_gga_done_s ( ltfat_gga_plan_s plan ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_gga_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_gga_plan_struct_sPtr'};fcnNum=fcnNum+1;
% extern void ltfat_gga_s ( const float * fPtr , const float * indVecPtr , const ltfatInt L , const ltfatInt W , const ltfatInt M , fftwf_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gga_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gga_execute_s ( ltfat_gga_plan_s p , const float * fPtr , const ltfatInt W , fftwf_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gga_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_gga_plan_struct_sPtr', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_s ( const float * fPtr , const ltfatInt L , const ltfatInt W , const ltfatInt K , const float deltao , const float o , fftwf_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglongfloatfloatvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'single', 'single', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_execute_s ( ltfat_chzt_plan_s p , const float * fPtr , const ltfatInt W , fftwf_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_chzt_plan_struct_sPtr', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern ltfat_chzt_plan_s ltfat_chzt_init_s ( const ltfatInt K , const ltfatInt L , const float deltao , const float o , const unsigned fftw_flags , czt_ffthint hint ); 
fcns.thunkname{fcnNum}='voidPtrlonglongfloatfloatuint32czt_ffthintThunk';fcns.name{fcnNum}='ltfat_chzt_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_chzt_plan_struct_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'single', 'single', 'uint32', 'czt_ffthint'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_done_s ( ltfat_chzt_plan_s p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_chzt_plan_struct_sPtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_fac_s ( const float * fPtr , const ltfatInt L , const ltfatInt W , const ltfatInt K , const float deltao , const float o , fftwf_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglongfloatfloatvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_fac_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'single', 'single', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_fac_execute_s ( ltfat_chzt_plan_s p , const float * fPtr , const ltfatInt W , fftwf_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_fac_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_chzt_plan_struct_sPtr', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern ltfat_chzt_plan_s ltfat_chzt_fac_init_s ( const ltfatInt K , const ltfatInt L , const float deltao , const float o , const unsigned fftw_flags , czt_ffthint hint ); 
fcns.thunkname{fcnNum}='voidPtrlonglongfloatfloatuint32czt_ffthintThunk';fcns.name{fcnNum}='ltfat_chzt_fac_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_chzt_plan_struct_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'single', 'single', 'uint32', 'czt_ffthint'};fcnNum=fcnNum+1;
% extern int ltfat_circshift_s ( const float in [], const ltfatInt L , const ltfatInt shift , float out []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_circshift_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftshift_s ( const float in [], ltfatInt L , float out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftshift_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_ifftshift_s ( const float in [], ltfatInt L , float out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifftshift_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fir2long_s ( const float in [], const ltfatInt Lfir , const ltfatInt Llong , float out []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fir2long_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_long2fir_s ( const float in [], const ltfatInt Llong , const ltfatInt Lfir , float out []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_long2fir_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_normalize_s ( const float in [], const ltfatInt L , ltfat_normalize_t flag , float out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongltfat_normalize_tvoidPtrThunk';fcns.name{fcnNum}='ltfat_normalize_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'ltfat_normalize_t', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_ensurecomplex_array_s ( const float * in , const ltfatInt L , fftwf_complex * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ensurecomplex_array_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgtphaselockhelper_s ( float * cin , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , float * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtphaselockhelper_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgtphaseunlockhelper_s ( float * cin , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , float * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtphaseunlockhelper_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_reverse_array_s ( const float * in , const ltfatInt L , float * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_reverse_array_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_conjugate_array_s ( const float * in , const ltfatInt L , float * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_conjugate_array_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_periodize_array_s ( const float * in , const ltfatInt Lin , const ltfatInt Lout , float * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_periodize_array_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fold_array_s ( const float * in , const ltfatInt Lin , const ltfatInt offset , const ltfatInt Lfold , float * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fold_array_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_findmaxinarray_s ( const float * in , const ltfatInt L , float * max , ltfatInt * idx ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_findmaxinarray_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int ltfat_findmaxinarraywrtmask_s ( const float * in , const int * mask , const ltfatInt L , float * max , ltfatInt * idx ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_findmaxinarraywrtmask_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'int32Ptr', 'long', 'singlePtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabframediag_s ( const float * g , ltfatInt gl , ltfatInt a , ltfatInt M , ltfatInt dl , float * d ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabframediag_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabdual_painless_s ( const float g [], const ltfatInt gl , const ltfatInt a , const ltfatInt M , float gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_painless_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabtight_painless_s ( const float g [], const ltfatInt gl , const ltfatInt a , const ltfatInt M , float gt []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_painless_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabpu_painless_s ( const float * g , ltfatInt gl , ltfatInt a , ltfatInt M , float * gpu ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabpu_painless_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_firwin_s ( LTFAT_FIRWIN win , int gl , float * g ); 
fcns.thunkname{fcnNum}='int32LTFAT_FIRWINint32voidPtrThunk';fcns.name{fcnNum}='ltfat_firwin_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'LTFAT_FIRWIN', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
% extern fftwf_plan ltfat_dct_init_s ( const ltfatInt L , const ltfatInt W , float * cout , const dct_kind kind ); 
fcns.thunkname{fcnNum}='voidPtrlonglongvoidPtrdct_kindThunk';fcns.name{fcnNum}='ltfat_dct_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fftwf_plan_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'singlePtr', 'dct_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dct_s ( const float * f , const ltfatInt L , const ltfatInt W , float * cout , const dct_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglongvoidPtrdct_kindThunk';fcns.name{fcnNum}='ltfat_dct_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr', 'dct_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dct_execute_s ( const fftwf_plan p , const float * f , const ltfatInt L , const ltfatInt W , float * cout , const dct_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrdct_kindThunk';fcns.name{fcnNum}='ltfat_dct_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fftwf_plan_sPtr', 'singlePtr', 'long', 'long', 'singlePtr', 'dct_kind'};fcnNum=fcnNum+1;
% extern fftwf_plan ltfat_dst_init_s ( const ltfatInt L , const ltfatInt W , float * cout , const dst_kind kind ); 
fcns.thunkname{fcnNum}='voidPtrlonglongvoidPtrdst_kindThunk';fcns.name{fcnNum}='ltfat_dst_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fftwf_plan_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'singlePtr', 'dst_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dst_s ( const float * f , const ltfatInt L , const ltfatInt W , float * cout , const dst_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglongvoidPtrdst_kindThunk';fcns.name{fcnNum}='ltfat_dst_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr', 'dst_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dst_execute_s ( fftwf_plan p , const float * f , const ltfatInt L , const ltfatInt W , float * cout , const dst_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrdst_kindThunk';fcns.name{fcnNum}='ltfat_dst_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fftwf_plan_sPtr', 'singlePtr', 'long', 'long', 'singlePtr', 'dst_kind'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_s ( const float * g , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftwf_complex * gf ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_init_s ( const ltfatInt L , const ltfatInt a , const ltfatInt M , unsigned flags , ltfat_wfac_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32longlonglonguint32voidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'uint32', 'ltfat_wfac_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_execute_s ( ltfat_wfac_plan_s * plan , const float * g , const ltfatInt R , fftwf_complex * gf ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_wfac_plan_sPtr', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_done_s ( ltfat_wfac_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_wfac_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_s ( const fftwf_complex * gf , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , float * g ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_init_s ( const ltfatInt L , const ltfatInt a , const ltfatInt M , unsigned flags , ltfat_iwfac_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32longlonglonguint32voidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'uint32', 'ltfat_iwfac_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_execute_s ( ltfat_iwfac_plan_s * plan , const fftwf_complex * gf , const ltfatInt R , float * g ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_iwfac_plan_sPtr', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_done_s ( ltfat_iwfac_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_iwfac_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_col2diag_s ( const float * cin , const ltfatInt L , float * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_col2diag_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabdual_long_s ( const float g [], const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , float gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_long_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabtight_long_s ( const float g [], const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , float gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_long_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabdual_fir_s ( const float g [], const ltfatInt gl , const ltfatInt L , const ltfatInt a , const ltfatInt M , const ltfatInt gdl , float gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_fir_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabtight_fir_s ( const float g [], const ltfatInt gl , const ltfatInt L , const ltfatInt a , const ltfatInt M , const ltfatInt gtl , float gt []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_fir_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwilt_long_s ( const float * f , const float * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , float * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwilt_long_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwilt_fb_s ( const float * f , const float * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , float * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwilt_fb_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwiltiii_long_s ( const float * f , const float * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , float * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwiltiii_long_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwiltiii_fb_s ( const float * f , const float * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , float * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwiltiii_fb_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwilt_long_s ( const float * cin , const float * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , float * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwilt_long_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwilt_fb_s ( const float * cin , const float * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , float * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwilt_fb_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwiltiii_long_s ( const float * cin , const float * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , float * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwiltiii_long_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwiltiii_fb_s ( const float * cin , const float * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , float * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwiltiii_fb_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gabreassign_s ( const float * s , const float * tgrad , const float * fgrad , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , float * sr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabreassign_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbankreassign_s ( const float * s [], const float * tgrad [], const float * fgrad [], const ltfatInt N [], const double a [], const double cfreq [], const ltfatInt M , float * sr [], fbreassHints hints , fbreassOptOut * repos ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrlongvoidPtrfbreassHintsvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbankreassign_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtrPtr', 'singlePtrPtr', 'singlePtrPtr', 'longPtr', 'doublePtr', 'doublePtr', 'long', 'singlePtrPtr', 'fbreassHints', 'fbreassOptOutPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_sc ( const fftwf_complex f [], const fftwf_complex g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftwf_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_init_sc ( const fftwf_complex f [], const fftwf_complex g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftwf_complex c [], const ltfat_phaseconvention ptype , unsigned flags , ltfat_dgt_long_plan_sc ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongvoidPtrltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_init_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'ltfat_phaseconvention', 'uint32', 'ltfat_dgt_long_plan_scPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_execute_sc ( ltfat_dgt_long_plan_sc * plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_execute_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_scPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_execute_newarray_sc ( ltfat_dgt_long_plan_sc * plan , const fftwf_complex f [], fftwf_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_execute_newarray_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_scPtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_done_sc ( ltfat_dgt_long_plan_sc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_done_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_scPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_walnut_execute_sc ( ltfat_dgt_long_plan_sc * plan , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_walnut_execute_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_scPtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_sc ( const fftwf_complex c [], const fftwf_complex g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftwf_complex f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_init_sc ( fftwf_complex c [], const fftwf_complex g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftwf_complex f [], unsigned flags , const ltfat_phaseconvention ptype , ltfat_idgt_long_plan_sc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongvoidPtruint32ltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_init_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'uint32', 'ltfat_phaseconvention', 'ltfat_idgt_long_plan_scPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_execute_sc ( ltfat_idgt_long_plan_sc * p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_execute_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_scPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_execute_newarray_sc ( ltfat_idgt_long_plan_sc * p , const fftwf_complex c [], fftwf_complex f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_execute_newarray_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_scPtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_done_sc ( ltfat_idgt_long_plan_sc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_done_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_scPtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_idgt_fac_sc ( const fftwf_complex * c , const fftwf_complex * gf , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftwf_complex * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fac_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idgt_walnut_execute_sc ( ltfat_idgt_long_plan_sc * p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_walnut_execute_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_scPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_sc ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_init_sc ( const fftwf_complex * g , const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , unsigned flags , ltfat_dgt_fb_plan_sc ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_init_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32', 'ltfat_dgt_fb_plan_scPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_execute_sc ( const ltfat_dgt_fb_plan_sc * plan , const fftwf_complex * f , const ltfatInt L , const ltfatInt W , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_execute_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_fb_plan_scPtr', 'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_done_sc ( ltfat_dgt_fb_plan_sc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_done_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_fb_plan_scPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_sc ( const fftwf_complex * cin , const fftwf_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftwf_complex * f ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_init_sc ( const fftwf_complex * g , const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , unsigned flags , ltfat_idgt_fb_plan_sc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_init_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32', 'ltfat_idgt_fb_plan_scPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_execute_sc ( ltfat_idgt_fb_plan_sc * p , const fftwf_complex * cin , const ltfatInt L , const ltfatInt W , fftwf_complex * f ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_execute_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_fb_plan_scPtr', 'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_done_sc ( ltfat_idgt_fb_plan_sc ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_done_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_fb_plan_scPtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_extend_left_sc ( const fftwf_complex * in , ltfatInt inLen , fftwf_complex * buffer , ltfatInt buffLen , ltfatInt filtLen , ltfatExtType ext , ltfatInt a ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrlonglongltfatExtTypelongThunk';fcns.name{fcnNum}='ltfat_extend_left_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr', 'long', 'long', 'ltfatExtType', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_extend_right_sc ( const fftwf_complex * in , ltfatInt inLen , fftwf_complex * buffer , ltfatInt filtLen , ltfatExtType ext , ltfatInt a ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrlongltfatExtTypelongThunk';fcns.name{fcnNum}='ltfat_extend_right_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr', 'long', 'ltfatExtType', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_td_sc ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt a , const ltfatInt skip , fftwf_complex * c , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_convsub_td_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_td_sc ( const fftwf_complex * c , const fftwf_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt a , const ltfatInt skip , fftwf_complex * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_upconv_td_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_filterbank_td_sc ( const fftwf_complex * f , const fftwf_complex * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , fftwf_complex * c [], ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_filterbank_td_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'singlePtrPtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_td_sc ( const fftwf_complex * c [], const fftwf_complex * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , fftwf_complex * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_ifilterbank_td_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtrPtr', 'singlePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_atrousfilterbank_td_sc ( const fftwf_complex * f , const fftwf_complex * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , fftwf_complex * c , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_atrousfilterbank_td_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_iatrousfilterbank_td_sc ( const fftwf_complex * c , const fftwf_complex * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , fftwf_complex * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_iatrousfilterbank_td_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_atrousconvsub_td_sc ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt ga , ltfatInt skip , fftwf_complex * c , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_atrousconvsub_td_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_atrousupconv_td_sc ( const fftwf_complex * c , const fftwf_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt ga , const ltfatInt skip , fftwf_complex * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_atrousupconv_td_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern ltfat_gga_plan_sc ltfat_gga_init_sc ( const float * indVecPtr , const ltfatInt M , const ltfatInt L ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrlonglongThunk';fcns.name{fcnNum}='ltfat_gga_init_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_gga_plan_struct_scPtr'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_gga_done_sc ( ltfat_gga_plan_sc plan ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_gga_done_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_gga_plan_struct_scPtr'};fcnNum=fcnNum+1;
% extern void ltfat_gga_sc ( const fftwf_complex * fPtr , const float * indVecPtr , const ltfatInt L , const ltfatInt W , const ltfatInt M , fftwf_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gga_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gga_execute_sc ( ltfat_gga_plan_sc p , const fftwf_complex * fPtr , const ltfatInt W , fftwf_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gga_execute_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_gga_plan_struct_scPtr', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_sc ( const fftwf_complex * fPtr , const ltfatInt L , const ltfatInt W , const ltfatInt K , const float deltao , const float o , fftwf_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglongfloatfloatvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'single', 'single', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_execute_sc ( ltfat_chzt_plan_sc p , const fftwf_complex * fPtr , const ltfatInt W , fftwf_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_execute_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_chzt_plan_struct_scPtr', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern ltfat_chzt_plan_sc ltfat_chzt_init_sc ( const ltfatInt K , const ltfatInt L , const float deltao , const float o , const unsigned fftw_flags , czt_ffthint hint ); 
fcns.thunkname{fcnNum}='voidPtrlonglongfloatfloatuint32czt_ffthintThunk';fcns.name{fcnNum}='ltfat_chzt_init_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_chzt_plan_struct_scPtr'; fcns.RHS{fcnNum}={'long', 'long', 'single', 'single', 'uint32', 'czt_ffthint'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_done_sc ( ltfat_chzt_plan_sc p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_done_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_chzt_plan_struct_scPtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_fac_sc ( const fftwf_complex * fPtr , const ltfatInt L , const ltfatInt W , const ltfatInt K , const float deltao , const float o , fftwf_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglongfloatfloatvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_fac_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'single', 'single', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_fac_execute_sc ( ltfat_chzt_plan_sc p , const fftwf_complex * fPtr , const ltfatInt W , fftwf_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_fac_execute_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_chzt_plan_struct_scPtr', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern ltfat_chzt_plan_sc ltfat_chzt_fac_init_sc ( const ltfatInt K , const ltfatInt L , const float deltao , const float o , const unsigned fftw_flags , czt_ffthint hint ); 
fcns.thunkname{fcnNum}='voidPtrlonglongfloatfloatuint32czt_ffthintThunk';fcns.name{fcnNum}='ltfat_chzt_fac_init_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_chzt_plan_struct_scPtr'; fcns.RHS{fcnNum}={'long', 'long', 'single', 'single', 'uint32', 'czt_ffthint'};fcnNum=fcnNum+1;
% extern int ltfat_circshift_sc ( const fftwf_complex in [], const ltfatInt L , const ltfatInt shift , fftwf_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_circshift_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftshift_sc ( const fftwf_complex in [], ltfatInt L , fftwf_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftshift_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_ifftshift_sc ( const fftwf_complex in [], ltfatInt L , fftwf_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifftshift_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fir2long_sc ( const fftwf_complex in [], const ltfatInt Lfir , const ltfatInt Llong , fftwf_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fir2long_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_long2fir_sc ( const fftwf_complex in [], const ltfatInt Llong , const ltfatInt Lfir , fftwf_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_long2fir_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_normalize_sc ( const fftwf_complex in [], const ltfatInt L , ltfat_normalize_t flag , fftwf_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongltfat_normalize_tvoidPtrThunk';fcns.name{fcnNum}='ltfat_normalize_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'ltfat_normalize_t', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_ensurecomplex_array_sc ( const fftwf_complex * in , const ltfatInt L , fftwf_complex * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ensurecomplex_array_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgtphaselockhelper_sc ( fftwf_complex * cin , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtphaselockhelper_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgtphaseunlockhelper_sc ( fftwf_complex * cin , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtphaseunlockhelper_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_reverse_array_sc ( const fftwf_complex * in , const ltfatInt L , fftwf_complex * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_reverse_array_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_conjugate_array_sc ( const fftwf_complex * in , const ltfatInt L , fftwf_complex * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_conjugate_array_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_periodize_array_sc ( const fftwf_complex * in , const ltfatInt Lin , const ltfatInt Lout , fftwf_complex * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_periodize_array_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fold_array_sc ( const fftwf_complex * in , const ltfatInt Lin , const ltfatInt offset , const ltfatInt Lfold , fftwf_complex * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fold_array_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_findmaxinarray_sc ( const fftwf_complex * in , const ltfatInt L , fftwf_complex * max , ltfatInt * idx ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_findmaxinarray_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int ltfat_findmaxinarraywrtmask_sc ( const fftwf_complex * in , const int * mask , const ltfatInt L , fftwf_complex * max , ltfatInt * idx ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_findmaxinarraywrtmask_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'int32Ptr', 'long', 'singlePtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabframediag_sc ( const fftwf_complex * g , ltfatInt gl , ltfatInt a , ltfatInt M , ltfatInt dl , fftwf_complex * d ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabframediag_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabdual_painless_sc ( const fftwf_complex g [], const ltfatInt gl , const ltfatInt a , const ltfatInt M , fftwf_complex gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_painless_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabtight_painless_sc ( const fftwf_complex g [], const ltfatInt gl , const ltfatInt a , const ltfatInt M , fftwf_complex gt []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_painless_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabpu_painless_sc ( const fftwf_complex * g , ltfatInt gl , ltfatInt a , ltfatInt M , fftwf_complex * gpu ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabpu_painless_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_firwin_sc ( LTFAT_FIRWIN win , int gl , fftwf_complex * g ); 
fcns.thunkname{fcnNum}='int32LTFAT_FIRWINint32voidPtrThunk';fcns.name{fcnNum}='ltfat_firwin_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'LTFAT_FIRWIN', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
% extern fftwf_plan ltfat_dct_init_sc ( const ltfatInt L , const ltfatInt W , fftwf_complex * cout , const dct_kind kind ); 
fcns.thunkname{fcnNum}='voidPtrlonglongvoidPtrdct_kindThunk';fcns.name{fcnNum}='ltfat_dct_init_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fftwf_plan_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'singlePtr', 'dct_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dct_sc ( const fftwf_complex * f , const ltfatInt L , const ltfatInt W , fftwf_complex * cout , const dct_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglongvoidPtrdct_kindThunk';fcns.name{fcnNum}='ltfat_dct_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr', 'dct_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dct_execute_sc ( const fftwf_plan p , const fftwf_complex * f , const ltfatInt L , const ltfatInt W , fftwf_complex * cout , const dct_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrdct_kindThunk';fcns.name{fcnNum}='ltfat_dct_execute_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fftwf_plan_sPtr', 'singlePtr', 'long', 'long', 'singlePtr', 'dct_kind'};fcnNum=fcnNum+1;
% extern fftwf_plan ltfat_dst_init_sc ( const ltfatInt L , const ltfatInt W , fftwf_complex * cout , const dst_kind kind ); 
fcns.thunkname{fcnNum}='voidPtrlonglongvoidPtrdst_kindThunk';fcns.name{fcnNum}='ltfat_dst_init_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fftwf_plan_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'singlePtr', 'dst_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dst_sc ( const fftwf_complex * f , const ltfatInt L , const ltfatInt W , fftwf_complex * cout , const dst_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglongvoidPtrdst_kindThunk';fcns.name{fcnNum}='ltfat_dst_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr', 'dst_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dst_execute_sc ( fftwf_plan p , const fftwf_complex * f , const ltfatInt L , const ltfatInt W , fftwf_complex * cout , const dst_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrdst_kindThunk';fcns.name{fcnNum}='ltfat_dst_execute_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fftwf_plan_sPtr', 'singlePtr', 'long', 'long', 'singlePtr', 'dst_kind'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_sc ( const fftwf_complex * g , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftwf_complex * gf ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_init_sc ( const ltfatInt L , const ltfatInt a , const ltfatInt M , unsigned flags , ltfat_wfac_plan_sc ** plan ); 
fcns.thunkname{fcnNum}='int32longlonglonguint32voidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_init_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'uint32', 'ltfat_wfac_plan_scPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_execute_sc ( ltfat_wfac_plan_sc * plan , const fftwf_complex * g , const ltfatInt R , fftwf_complex * gf ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_execute_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_wfac_plan_scPtr', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_done_sc ( ltfat_wfac_plan_sc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_done_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_wfac_plan_scPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_sc ( const fftwf_complex * gf , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftwf_complex * g ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_init_sc ( const ltfatInt L , const ltfatInt a , const ltfatInt M , unsigned flags , ltfat_iwfac_plan_sc ** plan ); 
fcns.thunkname{fcnNum}='int32longlonglonguint32voidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_init_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'uint32', 'ltfat_iwfac_plan_scPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_execute_sc ( ltfat_iwfac_plan_sc * plan , const fftwf_complex * gf , const ltfatInt R , fftwf_complex * g ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_execute_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_iwfac_plan_scPtr', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_done_sc ( ltfat_iwfac_plan_sc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_done_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_iwfac_plan_scPtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_col2diag_sc ( const fftwf_complex * cin , const ltfatInt L , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_col2diag_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabdual_long_sc ( const fftwf_complex g [], const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftwf_complex gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_long_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabtight_long_sc ( const fftwf_complex g [], const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftwf_complex gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_long_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabdual_fir_sc ( const fftwf_complex g [], const ltfatInt gl , const ltfatInt L , const ltfatInt a , const ltfatInt M , const ltfatInt gdl , fftwf_complex gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_fir_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabtight_fir_sc ( const fftwf_complex g [], const ltfatInt gl , const ltfatInt L , const ltfatInt a , const ltfatInt M , const ltfatInt gtl , fftwf_complex gt []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_fir_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwilt_long_sc ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwilt_long_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwilt_fb_sc ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwilt_fb_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwiltiii_long_sc ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwiltiii_long_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwiltiii_fb_sc ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwiltiii_fb_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwilt_long_sc ( const fftwf_complex * cin , const fftwf_complex * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , fftwf_complex * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwilt_long_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwilt_fb_sc ( const fftwf_complex * cin , const fftwf_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , fftwf_complex * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwilt_fb_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwiltiii_long_sc ( const fftwf_complex * cin , const fftwf_complex * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , fftwf_complex * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwiltiii_long_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwiltiii_fb_sc ( const fftwf_complex * cin , const fftwf_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , fftwf_complex * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwiltiii_fb_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gabreassign_sc ( const fftwf_complex * s , const float * tgrad , const float * fgrad , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftwf_complex * sr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabreassign_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbankreassign_sc ( const fftwf_complex * s [], const float * tgrad [], const float * fgrad [], const ltfatInt N [], const double a [], const double cfreq [], const ltfatInt M , fftwf_complex * sr [], fbreassHints hints , fbreassOptOut * repos ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrlongvoidPtrfbreassHintsvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbankreassign_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtrPtr', 'singlePtrPtr', 'singlePtrPtr', 'longPtr', 'doublePtr', 'doublePtr', 'long', 'singlePtrPtr', 'fbreassHints', 'fbreassOptOutPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_long_s ( const float f [], const float g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftwf_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_long_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_long_init_s ( const float f [], const float g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftwf_complex c [], const ltfat_phaseconvention ptype , unsigned flags , ltfat_dgtreal_long_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongvoidPtrltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_long_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'ltfat_phaseconvention', 'uint32', 'ltfat_dgtreal_long_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_long_execute_s ( ltfat_dgtreal_long_plan_s * plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_long_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgtreal_long_plan_sPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_long_execute_newarray_s ( ltfat_dgtreal_long_plan_s * plan , const float * f , fftwf_complex * c ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_long_execute_newarray_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgtreal_long_plan_sPtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_long_done_s ( ltfat_dgtreal_long_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_long_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgtreal_long_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_walnut_plan_s ( ltfat_dgtreal_long_plan_s * plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_walnut_plan_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgtreal_long_plan_sPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_long_s ( const fftwf_complex c [], const float g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , float f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_long_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_long_init_s ( fftwf_complex c [], const float g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , float f [], const ltfat_phaseconvention ptype , unsigned flags , ltfat_idgtreal_long_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongvoidPtrltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_long_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr', 'ltfat_phaseconvention', 'uint32', 'ltfat_idgtreal_long_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_long_execute_s ( ltfat_idgtreal_long_plan_s * plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_long_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgtreal_long_plan_sPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_long_execute_newarray_s ( ltfat_idgtreal_long_plan_s * p , const fftwf_complex * c , float * f ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_long_execute_newarray_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgtreal_long_plan_sPtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_long_done_s ( ltfat_idgtreal_long_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_long_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgtreal_long_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_idgtreal_walnut_execute_s ( ltfat_idgtreal_long_plan_s * p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_walnut_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_idgtreal_long_plan_sPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_fb_s ( const float f [], const float g [], const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftwf_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_fb_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_fb_init_s ( const float g [], const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , unsigned flags , ltfat_dgtreal_fb_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_fb_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32', 'ltfat_dgtreal_fb_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_fb_execute_s ( ltfat_dgtreal_fb_plan_s * plan , const float f [], const ltfatInt L , const ltfatInt W , fftwf_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_fb_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgtreal_fb_plan_sPtr', 'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_fb_done_s ( ltfat_dgtreal_fb_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_fb_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgtreal_fb_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_fb_s ( const fftwf_complex c [], const float g [], const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , float f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_fb_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_fb_init_s ( const float g [], const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , unsigned flags , ltfat_idgtreal_fb_plan_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_fb_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32', 'ltfat_idgtreal_fb_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_fb_execute_s ( ltfat_idgtreal_fb_plan_s * plan , const fftwf_complex c [], const ltfatInt L , const ltfatInt W , float f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_fb_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgtreal_fb_plan_sPtr', 'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_fb_done_s ( ltfat_idgtreal_fb_plan_s ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_fb_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgtreal_fb_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern ltfat_dgt_multi_plan_s ltfat_dgt_multi_init_s ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt Lg , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt lt1 , const ltfatInt lt2 , fftwf_complex * c , unsigned flags ); 
fcns.thunkname{fcnNum}='ltfat_dgt_multi_plan_svoidPtrvoidPtrlonglonglonglonglonglonglongvoidPtruint32Thunk';fcns.name{fcnNum}='ltfat_dgt_multi_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_dgt_multi_plan_s'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'singlePtr', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_multi_execute_s ( const ltfat_dgt_multi_plan_s plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_multi_plan_sThunk';fcns.name{fcnNum}='ltfat_dgt_multi_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_multi_plan_s'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_multi_done_s ( ltfat_dgt_multi_plan_s plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_multi_plan_sThunk';fcns.name{fcnNum}='ltfat_dgt_multi_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_multi_plan_s'};fcnNum=fcnNum+1;
% extern void ltfat_nonsepwin2multi_s ( const fftwf_complex * g , const ltfatInt L , const ltfatInt Lg , const ltfatInt a , const ltfatInt M , const ltfatInt lt1 , const ltfatInt lt2 , fftwf_complex * mwin ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_nonsepwin2multi_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_multi_s ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt Lg , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt lt1 , const ltfatInt lt2 , fftwf_complex * c ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_multi_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern ltfat_dgt_shear_plan_s ltfat_dgt_shear_init_s ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt s0 , const ltfatInt s1 , const ltfatInt br , fftwf_complex * cout , unsigned flags ); 
fcns.thunkname{fcnNum}='ltfat_dgt_shear_plan_svoidPtrvoidPtrlonglonglonglonglonglonglongvoidPtruint32Thunk';fcns.name{fcnNum}='ltfat_dgt_shear_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_dgt_shear_plan_s'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'singlePtr', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_shear_execute_s ( const ltfat_dgt_shear_plan_s plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_shear_plan_sThunk';fcns.name{fcnNum}='ltfat_dgt_shear_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_shear_plan_s'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_shear_done_s ( ltfat_dgt_shear_plan_s plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_shear_plan_sThunk';fcns.name{fcnNum}='ltfat_dgt_shear_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_shear_plan_s'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_shear_s ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt s0 , const ltfatInt s1 , const ltfatInt br , fftwf_complex * c ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_shear_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_pchirp_s ( const long long L , const long long n , fftwf_complex * g ); 
fcns.thunkname{fcnNum}='voidint64int64voidPtrThunk';fcns.name{fcnNum}='ltfat_pchirp_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int64', 'int64', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftcircshift_sc ( const fftwf_complex in [], const ltfatInt L , const double shift , fftwf_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongdoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_fftcircshift_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'double', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftfftshift_sc ( const fftwf_complex in [], const ltfatInt L , fftwf_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftfftshift_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftifftshift_sc ( const fftwf_complex in [], const ltfatInt L , fftwf_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftifftshift_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftrealcircshift_sc ( const fftwf_complex in [], const ltfatInt L , const double shift , fftwf_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongdoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_fftrealcircshift_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'double', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftrealfftshift_sc ( const fftwf_complex in [], const ltfatInt L , fftwf_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftrealfftshift_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftrealifftshift_sc ( const fftwf_complex in [], const ltfatInt L , fftwf_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftrealifftshift_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_real2complex_array_s ( const float in [], const ltfatInt L , fftwf_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_real2complex_array_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_complex2real_array_s ( const fftwf_complex in [], const ltfatInt L , float out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_complex2real_array_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_phaselock_sc ( const fftwf_complex cFreqinv [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftwf_complex cTimeinv []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_phaselock_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_phaseunlock_sc ( const fftwf_complex cTimeinv [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftwf_complex cFreqinv []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_phaseunlock_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_phaselock_sc ( const fftwf_complex cFreqinv [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftwf_complex cTimeinv []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_phaselock_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_phaseunlock_sc ( const fftwf_complex cTimeinv [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftwf_complex cFreqinv []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_phaseunlock_sc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% int ltfat_rtdgtreal_commoninit_s ( const float * g , const ltfatInt gl , const ltfatInt M , const rtdgt_phasetype ptype , const ltfat_transformdirection tradir , ltfat_rtdgtreal_plan_s ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongrtdgt_phasetypeltfat_transformdirectionvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_commoninit_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'rtdgt_phasetype', 'ltfat_transformdirection', 'ltfat_rtdgtreal_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_init_s ( const float g [], const ltfatInt gl , const ltfatInt M , const rtdgt_phasetype ptype , ltfat_rtdgtreal_plan_s ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongrtdgt_phasetypevoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'rtdgt_phasetype', 'ltfat_rtdgtreal_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_execute_s ( const ltfat_rtdgtreal_plan_s * p , const float f [], const ltfatInt W , fftwf_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_plan_sPtr', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_done_s ( ltfat_rtdgtreal_plan_s ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_init_s ( const float g [], const ltfatInt gl , const ltfatInt M , const rtdgt_phasetype ptype , ltfat_rtdgtreal_plan_s ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongrtdgt_phasetypevoidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'rtdgt_phasetype', 'ltfat_rtdgtreal_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_execute_s ( const ltfat_rtidgtreal_plan_s * p , const fftwf_complex c [], const ltfatInt W , float f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_plan_sPtr', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_done_s ( ltfat_rtidgtreal_plan_s ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_plan_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_fifo_init_s ( ltfatInt fifoLen , ltfatInt procDelay , ltfatInt gl , ltfatInt a , ltfatInt Wmax , ltfat_rtdgtreal_fifo_state_s ** p ); 
fcns.thunkname{fcnNum}='int32longlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_fifo_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'long', 'long', 'ltfat_rtdgtreal_fifo_state_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_fifo_write_s ( ltfat_rtdgtreal_fifo_state_s * p , const float * buf [], const ltfatInt bufLen , const ltfatInt W ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_fifo_write_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_fifo_state_sPtr', 'singlePtrPtr', 'long', 'long'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_fifo_read_s ( ltfat_rtdgtreal_fifo_state_s * p , float buf []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_fifo_read_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_fifo_state_sPtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_fifo_done_s ( ltfat_rtdgtreal_fifo_state_s ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_fifo_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_fifo_state_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_fifo_init_s ( ltfatInt fifoLen , ltfatInt gl , ltfatInt a , ltfatInt Wmax , ltfat_rtidgtreal_fifo_state_s ** p ); 
fcns.thunkname{fcnNum}='int32longlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_fifo_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'long', 'ltfat_rtidgtreal_fifo_state_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_fifo_write_s ( ltfat_rtidgtreal_fifo_state_s * p , const float buf []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_fifo_write_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtidgtreal_fifo_state_sPtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_fifo_read_s ( ltfat_rtidgtreal_fifo_state_s * p , const ltfatInt bufLen , const ltfatInt W , float * buf []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_fifo_read_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtidgtreal_fifo_state_sPtr', 'long', 'long', 'singlePtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_fifo_done_s ( ltfat_rtidgtreal_fifo_state_s ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_fifo_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtidgtreal_fifo_state_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_processor_init_s ( const float ga [], const ltfatInt gal , const float gs [], const ltfatInt gsl , const ltfatInt a , const ltfatInt M , const ltfatInt Wmax , ltfat_rtdgtreal_processor_callback_s * callback , void * userdata , ltfat_rtdgtreal_processor_state_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrlonglonglonglongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_processor_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'singlePtr', 'long', 'long', 'long', 'long', 'FcnPtrPtr', 'voidPtr', 'ltfat_rtdgtreal_processor_state_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_processor_init_win_s ( LTFAT_FIRWIN win , const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfatInt Wmax , ltfat_rtdgtreal_processor_callback_s * callback , void * userdata , ltfat_rtdgtreal_processor_state_s ** plan ); 
fcns.thunkname{fcnNum}='int32LTFAT_FIRWINlonglonglonglongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_processor_init_win_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'LTFAT_FIRWIN', 'long', 'long', 'long', 'long', 'FcnPtrPtr', 'voidPtr', 'ltfat_rtdgtreal_processor_state_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_processor_execute_s ( ltfat_rtdgtreal_processor_state_s * p , const float * in [], const ltfatInt L , const ltfatInt W , float * out []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_processor_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_processor_state_sPtr', 'singlePtrPtr', 'long', 'long', 'singlePtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_processor_execute_compact_s ( ltfat_rtdgtreal_processor_state_s * p , const float in [], const ltfatInt len , const ltfatInt chanNo , float out []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_processor_execute_compact_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_processor_state_sPtr', 'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_processor_done_s ( ltfat_rtdgtreal_processor_state_s ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_processor_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_processor_state_sPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_processor_setcallback_s ( ltfat_rtdgtreal_processor_state_s * p , ltfat_rtdgtreal_processor_callback_s * callback , void * userdata ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_processor_setcallback_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_processor_state_sPtr', 'FcnPtrPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern void ltfat_default_rtdgtreal_processor_callback_s ( void * userdata , const fftwf_complex in [], const int M2 , const int W , fftwf_complex out []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='ltfat_default_rtdgtreal_processor_callback_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'singlePtr', 'int32', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_wfacreal_s ( const float * g , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftwf_complex * gf ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_wfacreal_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_iwfacreal_s ( const fftwf_complex * gf , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , float * g ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_iwfacreal_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gabdual_fac_s ( const fftwf_complex * g , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftwf_complex * gdualf ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_fac_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gabdualreal_fac_s ( const fftwf_complex * g , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftwf_complex * gdualf ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdualreal_fac_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gabtight_fac_s ( const fftwf_complex * gf , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftwf_complex * gtightf ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_fac_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gabtightreal_fac_s ( const fftwf_complex * gf , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftwf_complex * gtightf ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtightreal_fac_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_ola_s ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt bl , const ltfat_phaseconvention ptype , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_ola_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgtreal_ola_s ( const float * f , const float * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt bl , const ltfat_phaseconvention ptype , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_ola_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_shearola_s ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt s0 , const ltfatInt s1 , const ltfatInt br , const ltfatInt bl , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglonglonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_shearola_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern fftwf_plan ltfat_fftreal_init_s ( float * f , const ltfatInt L , const ltfatInt W , fftwf_complex * cout , unsigned flag ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrlonglongvoidPtruint32Thunk';fcns.name{fcnNum}='ltfat_fftreal_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fftwf_plan_sPtr'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_fftreal_execute_s ( fftwf_plan p , float * f , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftreal_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fftwf_plan_sPtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_fftreal_s ( float * f , const ltfatInt L , const ltfatInt W , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftreal_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern fftwf_plan ltfat_ifftreal_init_s ( fftwf_complex * c , const ltfatInt L , const ltfatInt W , float * f , unsigned flag ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrlonglongvoidPtruint32Thunk';fcns.name{fcnNum}='ltfat_ifftreal_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fftwf_plan_sPtr'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_ifftreal_execute_s ( fftwf_plan , fftwf_complex * c , const ltfatInt L , const ltfatInt W , float * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifftreal_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fftwf_plan_sPtr', 'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_ifftreal_s ( fftwf_complex * c , const ltfatInt L , const ltfatInt W , float * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifftreal_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_ufilterbank_fft_s ( const fftwf_complex * f , const fftwf_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ufilterbank_fft_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbank_fft_s ( const fftwf_complex * F , const fftwf_complex * G [], const ltfatInt L , const ltfatInt W , const ltfatInt a [], const ltfatInt M , fftwf_complex * cout []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbank_fft_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtrPtr', 'long', 'long', 'longPtr', 'long', 'singlePtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbank_fft_execute_s ( ltfat_convsub_fft_plan_s p [], const fftwf_complex * F , const fftwf_complex * G [], const ltfatInt M , fftwf_complex * cout []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbank_fft_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_convsub_fft_plan_struct_sPtrPtr', 'singlePtr', 'singlePtrPtr', 'long', 'singlePtrPtr'};fcnNum=fcnNum+1;
% extern ltfat_convsub_fft_plan_s ltfat_convsub_fft_init_s ( const ltfatInt L , const ltfatInt W , const ltfatInt a , const fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fft_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_convsub_fft_plan_struct_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_fft_done_s ( ltfat_convsub_fft_plan_s p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fft_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_convsub_fft_plan_struct_sPtr'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_fft_execute_s ( const ltfat_convsub_fft_plan_s p , const fftwf_complex * F , const fftwf_complex * G , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fft_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_convsub_fft_plan_struct_sPtr', 'singlePtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_fft_s ( const fftwf_complex * F , const fftwf_complex * G , const ltfatInt L , const ltfatInt W , const ltfatInt a , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fft_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbank_fftbl_s ( const fftwf_complex * F , const fftwf_complex * G [], const ltfatInt L , const ltfatInt Gl [], const ltfatInt W , const double a [], const ltfatInt M , const ltfatInt foff [], const int realonly [], fftwf_complex * cout []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrlongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbank_fftbl_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtrPtr', 'long', 'longPtr', 'long', 'doublePtr', 'long', 'longPtr', 'int32Ptr', 'singlePtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbank_fftbl_execute_s ( ltfat_convsub_fftbl_plan_s p [], const fftwf_complex * F , const fftwf_complex * G [], const ltfatInt M , const ltfatInt foff [], const int realonly [], fftwf_complex * cout []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbank_fftbl_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_convsub_fftbl_plan_struct_sPtrPtr', 'singlePtr', 'singlePtrPtr', 'long', 'longPtr', 'int32Ptr', 'singlePtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_fft_execute_s ( ltfat_upconv_fft_plan_s p [], const fftwf_complex * cin [], const fftwf_complex * G [], const ltfatInt M , fftwf_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifilterbank_fft_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fft_plan_struct_sPtrPtr', 'singlePtrPtr', 'singlePtrPtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern ltfat_convsub_fftbl_plan_s ltfat_convsub_fftbl_init_s ( const ltfatInt L , const ltfatInt Gl , const ltfatInt W , const double a , const fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidPtrlonglonglongdoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fftbl_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_convsub_fftbl_plan_struct_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'double', 'singlePtr'};fcnNum=fcnNum+1;
% extern ltfat_convsub_fftbl_plan_s ltfat_convsub_fftbl_init_no_ifft_plan_s ( const ltfatInt L , const ltfatInt Gl , const ltfatInt W , const double a ); 
fcns.thunkname{fcnNum}='voidPtrlonglonglongdoubleThunk';fcns.name{fcnNum}='ltfat_convsub_fftbl_init_no_ifft_plan_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_convsub_fftbl_plan_struct_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'double'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_fftbl_done_s ( ltfat_convsub_fftbl_plan_s p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fftbl_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_convsub_fftbl_plan_struct_sPtr'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_fftbl_execute_s ( const ltfat_convsub_fftbl_plan_s p , const fftwf_complex * F , const fftwf_complex * G , const ltfatInt foff , const int realonly , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongint32voidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fftbl_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_convsub_fftbl_plan_struct_sPtr', 'singlePtr', 'singlePtr', 'long', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_fftbl_s ( const fftwf_complex * F , const fftwf_complex * G , const ltfatInt L , const ltfatInt Gl , const ltfatInt W , const double a , const ltfatInt foff , const int realonly , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongdoublelongint32voidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fftbl_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'double', 'long', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_fft_s ( const fftwf_complex * cin [], const fftwf_complex * G [], const ltfatInt L , const ltfatInt W , const ltfatInt a [], const ltfatInt M , fftwf_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifilterbank_fft_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtrPtr', 'singlePtrPtr', 'long', 'long', 'longPtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_fft_execute_s ( ltfat_upconv_fft_plan_s p [], const fftwf_complex * cin [], const fftwf_complex * G [], const ltfatInt M , fftwf_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifilterbank_fft_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fft_plan_struct_sPtrPtr', 'singlePtrPtr', 'singlePtrPtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_fft_s ( const fftwf_complex * cin , const fftwf_complex * G , const ltfatInt L , const ltfatInt W , const ltfatInt a , fftwf_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_upconv_fft_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern ltfat_upconv_fft_plan_s ltfat_upconv_fft_init_s ( const ltfatInt L , const ltfatInt W , const ltfatInt a ); 
fcns.thunkname{fcnNum}='voidPtrlonglonglongThunk';fcns.name{fcnNum}='ltfat_upconv_fft_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_upconv_fft_plan_struct_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_fft_execute_s ( ltfat_upconv_fft_plan_s p , const fftwf_complex * cin , const fftwf_complex * G , fftwf_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_upconv_fft_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fft_plan_struct_sPtr', 'singlePtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_fft_done_s ( ltfat_upconv_fft_plan_s p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_upconv_fft_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fft_plan_struct_sPtr'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_fftbl_s ( const fftwf_complex * cin [], const fftwf_complex * G [], const ltfatInt L , const ltfatInt Gl [], const ltfatInt W , const double a [], const ltfatInt M , const ptrdiff_t foff [], const int realonly [], fftwf_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrlongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifilterbank_fftbl_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtrPtr', 'singlePtrPtr', 'long', 'longPtr', 'long', 'doublePtr', 'long', 'longPtr', 'int32Ptr', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_fftbl_execute_s ( ltfat_upconv_fftbl_plan_s p [], const fftwf_complex * cin [], const fftwf_complex * G [], const ltfatInt M , const ltfatInt foff [], const int realonly [], fftwf_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifilterbank_fftbl_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fftbl_plan_struct_sPtrPtr', 'singlePtrPtr', 'singlePtrPtr', 'long', 'longPtr', 'int32Ptr', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_fftbl_s ( const fftwf_complex * cin , const fftwf_complex * G , const ltfatInt L , const ltfatInt Gl , const ltfatInt W , const double a , const ptrdiff_t foff , const int realonly , fftwf_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongdoublelongint32voidPtrThunk';fcns.name{fcnNum}='ltfat_upconv_fftbl_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'double', 'long', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
% extern ltfat_upconv_fftbl_plan_s ltfat_upconv_fftbl_init_s ( const ltfatInt L , const ltfatInt Gl , const ltfatInt W , const double a ); 
fcns.thunkname{fcnNum}='voidPtrlonglonglongdoubleThunk';fcns.name{fcnNum}='ltfat_upconv_fftbl_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_upconv_fftbl_plan_struct_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'double'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_fftbl_done_s ( ltfat_upconv_fftbl_plan_s p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_upconv_fftbl_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fftbl_plan_struct_sPtr'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_fftbl_execute_s ( const ltfat_upconv_fftbl_plan_s p , const fftwf_complex * cin , const fftwf_complex * G , const ptrdiff_t foff , const int realonly , fftwf_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongint32voidPtrThunk';fcns.name{fcnNum}='ltfat_upconv_fftbl_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fftbl_plan_struct_sPtr', 'singlePtr', 'singlePtr', 'long', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_pgauss_s ( const ltfatInt L , const double w , const double c_t , float * g ); 
fcns.thunkname{fcnNum}='int32longdoubledoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_pgauss_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'double', 'double', 'singlePtr'};fcnNum=fcnNum+1;
% extern int ltfat_pgauss_cmplx_s ( const ltfatInt L , const double w , const double c_t , const double c_f , fftwf_complex * g ); 
fcns.thunkname{fcnNum}='int32longdoubledoubledoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_pgauss_cmplx_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'double', 'double', 'double', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_pfilt_fir_rr_s ( const float * f , const float * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , float * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_pfilt_fir_rr_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern ltfat_heapinttask_s * ltfat_heapinttask_init_s ( const ltfatInt height , const ltfatInt N , const ltfatInt initheapsize , const float * s , int do_real ); 
fcns.thunkname{fcnNum}='voidPtrlonglonglongvoidPtrint32Thunk';fcns.name{fcnNum}='ltfat_heapinttask_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_heapinttask_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'singlePtr', 'int32'};fcnNum=fcnNum+1;
% extern void ltfat_heapint_execute_s ( ltfat_heapinttask_s * hit , const float * tgradw , const float * fgradw , float * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_heapint_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_heapinttask_sPtr', 'singlePtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_heapinttask_done_s ( ltfat_heapinttask_s * hit ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_heapinttask_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_heapinttask_sPtr'};fcnNum=fcnNum+1;
% extern void ltfat_heapinttask_resetmax_s ( ltfat_heapinttask_s * hit , const float * news , const float tol ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrfloatThunk';fcns.name{fcnNum}='ltfat_heapinttask_resetmax_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_heapinttask_sPtr', 'singlePtr', 'single'};fcnNum=fcnNum+1;
% extern void ltfat_heapinttask_resetmask_s ( ltfat_heapinttask_s * hit , const int * mask , const float * news , const float tol , const int do_log ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrfloatint32Thunk';fcns.name{fcnNum}='ltfat_heapinttask_resetmask_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_heapinttask_sPtr', 'int32Ptr', 'singlePtr', 'single', 'int32'};fcnNum=fcnNum+1;
% extern int * ltfat_heapinttask_get_mask_s ( ltfat_heapinttask_s * hit ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_heapinttask_get_mask_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'ltfat_heapinttask_sPtr'};fcnNum=fcnNum+1;
% extern void ltfat_heapint_s ( const float * s , const float * tgradw , const float * fgradw , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , const float tol , float * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlonglonglonglongfloatvoidPtrThunk';fcns.name{fcnNum}='ltfat_heapint_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'single', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_heapint_relgrad_s ( const float * s , const float * tgrad , const float * fgrad , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , const float tol , ltfat_phaseconvention phasetype , float * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlonglonglonglongfloatltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_heapint_relgrad_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'single', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_maskedheapint_s ( const float * c , const float * tgradw , const float * fgradw , const int * mask , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , float tol , float * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlonglonglonglongfloatvoidPtrThunk';fcns.name{fcnNum}='ltfat_maskedheapint_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'singlePtr', 'int32Ptr', 'long', 'long', 'long', 'long', 'single', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_maskedheapint_relgrad_s ( const float * c , const float * tgrad , const float * fgrad , const int * mask , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , float tol , ltfat_phaseconvention phasetype , float * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlonglonglonglongfloatltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_maskedheapint_relgrad_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'singlePtr', 'int32Ptr', 'long', 'long', 'long', 'long', 'single', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_heapintreal_s ( const float * s , const float * tgradw , const float * fgradw , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , const float tol , float * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlonglonglonglongfloatvoidPtrThunk';fcns.name{fcnNum}='ltfat_heapintreal_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'single', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_heapintreal_relgrad_s ( const float * s , const float * tgradw , const float * fgradw , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , const float tol , ltfat_phaseconvention phasetype , float * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlonglonglonglongfloatltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_heapintreal_relgrad_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'singlePtr', 'long', 'long', 'long', 'long', 'single', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_maskedheapintreal_s ( const float * s , const float * tgrad , const float * fgrad , const int * mask , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , float tol , float * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlonglonglonglongfloatvoidPtrThunk';fcns.name{fcnNum}='ltfat_maskedheapintreal_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'singlePtr', 'int32Ptr', 'long', 'long', 'long', 'long', 'single', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_maskedheapintreal_relgrad_s ( const float * s , const float * tgradw , const float * fgradw , const int * mask , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , float tol , ltfat_phaseconvention phasetype , float * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlonglonglonglongfloatltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_maskedheapintreal_relgrad_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'singlePtr', 'int32Ptr', 'long', 'long', 'long', 'long', 'single', 'ltfat_phaseconvention', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbankphasegrad_s ( const fftwf_complex * c [], const fftwf_complex * ch [], const fftwf_complex * cd [], const ltfatInt M , const ltfatInt N [], const ltfatInt L , const float minlvl , float * tgrad [], float * fgrad [], float * cs []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongvoidPtrlongfloatvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbankphasegrad_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtrPtr', 'singlePtrPtr', 'singlePtrPtr', 'long', 'longPtr', 'long', 'single', 'singlePtrPtr', 'singlePtrPtr', 'singlePtrPtr'};fcnNum=fcnNum+1;
% extern ltfat_dgt_ola_plan_s ltfat_dgt_ola_init_s ( const fftwf_complex * g , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt bl , const ltfat_phaseconvention ptype , unsigned flags ); 
fcns.thunkname{fcnNum}='ltfat_dgt_ola_plan_svoidPtrlonglonglonglonglongltfat_phaseconventionuint32Thunk';fcns.name{fcnNum}='ltfat_dgt_ola_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_dgt_ola_plan_s'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_ola_execute_s ( const ltfat_dgt_ola_plan_s plan , const fftwf_complex * f , const ltfatInt L , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_ola_plan_svoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_ola_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_ola_plan_s', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_ola_done_s ( ltfat_dgt_ola_plan_s plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_ola_plan_sThunk';fcns.name{fcnNum}='ltfat_dgt_ola_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_ola_plan_s'};fcnNum=fcnNum+1;
% extern ltfat_dgtreal_ola_plan_s ltfat_dgtreal_ola_init_s ( const float * g , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt bl , const ltfat_phaseconvention ptype , unsigned flags ); 
fcns.thunkname{fcnNum}='ltfat_dgtreal_ola_plan_svoidPtrlonglonglonglonglongltfat_phaseconventionuint32Thunk';fcns.name{fcnNum}='ltfat_dgtreal_ola_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_dgtreal_ola_plan_s'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_dgtreal_ola_execute_s ( const ltfat_dgtreal_ola_plan_s plan , const float * f , const ltfatInt L , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidltfat_dgtreal_ola_plan_svoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_ola_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgtreal_ola_plan_s', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgtreal_ola_done_s ( ltfat_dgtreal_ola_plan_s plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgtreal_ola_plan_sThunk';fcns.name{fcnNum}='ltfat_dgtreal_ola_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgtreal_ola_plan_s'};fcnNum=fcnNum+1;
% extern ltfat_dgt_shearola_plan_s ltfat_dgt_shearola_init_s ( const fftwf_complex * g , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt s0 , const ltfatInt s1 , const ltfatInt br , const ltfatInt bl , unsigned flags ); 
fcns.thunkname{fcnNum}='ltfat_dgt_shearola_plan_svoidPtrlonglonglonglonglonglonglonglonguint32Thunk';fcns.name{fcnNum}='ltfat_dgt_shearola_init_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_dgt_shearola_plan_s'; fcns.RHS{fcnNum}={'singlePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_shearola_execute_s ( const ltfat_dgt_shearola_plan_s plan , const fftwf_complex * f , const ltfatInt L , fftwf_complex * cout ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_shearola_plan_svoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_shearola_execute_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_shearola_plan_s', 'singlePtr', 'long', 'singlePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_shearola_done_s ( ltfat_dgt_shearola_plan_s plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_shearola_plan_sThunk';fcns.name{fcnNum}='ltfat_dgt_shearola_done_s'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_shearola_plan_s'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_d ( const double f [], const double g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftw_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_init_d ( const double f [], const double g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftw_complex c [], const ltfat_phaseconvention ptype , unsigned flags , ltfat_dgt_long_plan_d ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongvoidPtrltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'ltfat_phaseconvention', 'uint32', 'ltfat_dgt_long_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_execute_d ( ltfat_dgt_long_plan_d * plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_dPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_execute_newarray_d ( ltfat_dgt_long_plan_d * plan , const double f [], fftw_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_execute_newarray_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_dPtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_done_d ( ltfat_dgt_long_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_walnut_execute_d ( ltfat_dgt_long_plan_d * plan , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_walnut_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_dPtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_d ( const fftw_complex c [], const double g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftw_complex f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_init_d ( fftw_complex c [], const double g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftw_complex f [], unsigned flags , const ltfat_phaseconvention ptype , ltfat_idgt_long_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongvoidPtruint32ltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'uint32', 'ltfat_phaseconvention', 'ltfat_idgt_long_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_execute_d ( ltfat_idgt_long_plan_d * p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_dPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_execute_newarray_d ( ltfat_idgt_long_plan_d * p , const fftw_complex c [], fftw_complex f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_execute_newarray_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_dPtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_done_d ( ltfat_idgt_long_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_idgt_fac_d ( const fftw_complex * c , const fftw_complex * gf , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftw_complex * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fac_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idgt_walnut_execute_d ( ltfat_idgt_long_plan_d * p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_walnut_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_dPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_d ( const double * f , const double * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_init_d ( const double * g , const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , unsigned flags , ltfat_dgt_fb_plan_d ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32', 'ltfat_dgt_fb_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_execute_d ( const ltfat_dgt_fb_plan_d * plan , const double * f , const ltfatInt L , const ltfatInt W , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_fb_plan_dPtr', 'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_done_d ( ltfat_dgt_fb_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_fb_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_d ( const fftw_complex * cin , const double * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftw_complex * f ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_init_d ( const double * g , const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , unsigned flags , ltfat_idgt_fb_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32', 'ltfat_idgt_fb_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_execute_d ( ltfat_idgt_fb_plan_d * p , const fftw_complex * cin , const ltfatInt L , const ltfatInt W , fftw_complex * f ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_fb_plan_dPtr', 'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_done_d ( ltfat_idgt_fb_plan_d ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_fb_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_extend_left_d ( const double * in , ltfatInt inLen , double * buffer , ltfatInt buffLen , ltfatInt filtLen , ltfatExtType ext , ltfatInt a ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrlonglongltfatExtTypelongThunk';fcns.name{fcnNum}='ltfat_extend_left_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr', 'long', 'long', 'ltfatExtType', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_extend_right_d ( const double * in , ltfatInt inLen , double * buffer , ltfatInt filtLen , ltfatExtType ext , ltfatInt a ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrlongltfatExtTypelongThunk';fcns.name{fcnNum}='ltfat_extend_right_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr', 'long', 'ltfatExtType', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_td_d ( const double * f , const double * g , const ltfatInt L , const ltfatInt gl , const ltfatInt a , const ltfatInt skip , double * c , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_convsub_td_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_td_d ( const double * c , const double * g , const ltfatInt L , const ltfatInt gl , const ltfatInt a , const ltfatInt skip , double * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_upconv_td_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_filterbank_td_d ( const double * f , const double * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , double * c [], ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_filterbank_td_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'doublePtrPtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_td_d ( const double * c [], const double * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , double * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_ifilterbank_td_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'doublePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_atrousfilterbank_td_d ( const double * f , const double * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , double * c , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_atrousfilterbank_td_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_iatrousfilterbank_td_d ( const double * c , const double * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , double * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_iatrousfilterbank_td_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_atrousconvsub_td_d ( const double * f , const double * g , const ltfatInt L , const ltfatInt gl , const ltfatInt ga , ltfatInt skip , double * c , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_atrousconvsub_td_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_atrousupconv_td_d ( const double * c , const double * g , const ltfatInt L , const ltfatInt gl , const ltfatInt ga , const ltfatInt skip , double * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_atrousupconv_td_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern ltfat_gga_plan_d ltfat_gga_init_d ( const double * indVecPtr , const ltfatInt M , const ltfatInt L ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrlonglongThunk';fcns.name{fcnNum}='ltfat_gga_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_gga_plan_struct_dPtr'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_gga_done_d ( ltfat_gga_plan_d plan ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_gga_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_gga_plan_struct_dPtr'};fcnNum=fcnNum+1;
% extern void ltfat_gga_d ( const double * fPtr , const double * indVecPtr , const ltfatInt L , const ltfatInt W , const ltfatInt M , fftw_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gga_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gga_execute_d ( ltfat_gga_plan_d p , const double * fPtr , const ltfatInt W , fftw_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gga_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_gga_plan_struct_dPtr', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_d ( const double * fPtr , const ltfatInt L , const ltfatInt W , const ltfatInt K , const double deltao , const double o , fftw_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglongdoubledoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'double', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_execute_d ( ltfat_chzt_plan_d p , const double * fPtr , const ltfatInt W , fftw_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_chzt_plan_struct_dPtr', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern ltfat_chzt_plan_d ltfat_chzt_init_d ( const ltfatInt K , const ltfatInt L , const double deltao , const double o , const unsigned fftw_flags , czt_ffthint hint ); 
fcns.thunkname{fcnNum}='voidPtrlonglongdoubledoubleuint32czt_ffthintThunk';fcns.name{fcnNum}='ltfat_chzt_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_chzt_plan_struct_dPtr'; fcns.RHS{fcnNum}={'long', 'long', 'double', 'double', 'uint32', 'czt_ffthint'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_done_d ( ltfat_chzt_plan_d p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_chzt_plan_struct_dPtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_fac_d ( const double * fPtr , const ltfatInt L , const ltfatInt W , const ltfatInt K , const double deltao , const double o , fftw_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglongdoubledoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_fac_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'double', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_fac_execute_d ( ltfat_chzt_plan_d p , const double * fPtr , const ltfatInt W , fftw_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_fac_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_chzt_plan_struct_dPtr', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern ltfat_chzt_plan_d ltfat_chzt_fac_init_d ( const ltfatInt K , const ltfatInt L , const double deltao , const double o , const unsigned fftw_flags , czt_ffthint hint ); 
fcns.thunkname{fcnNum}='voidPtrlonglongdoubledoubleuint32czt_ffthintThunk';fcns.name{fcnNum}='ltfat_chzt_fac_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_chzt_plan_struct_dPtr'; fcns.RHS{fcnNum}={'long', 'long', 'double', 'double', 'uint32', 'czt_ffthint'};fcnNum=fcnNum+1;
% extern int ltfat_circshift_d ( const double in [], const ltfatInt L , const ltfatInt shift , double out []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_circshift_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftshift_d ( const double in [], ltfatInt L , double out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftshift_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_ifftshift_d ( const double in [], ltfatInt L , double out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifftshift_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fir2long_d ( const double in [], const ltfatInt Lfir , const ltfatInt Llong , double out []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fir2long_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_long2fir_d ( const double in [], const ltfatInt Llong , const ltfatInt Lfir , double out []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_long2fir_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_normalize_d ( const double in [], const ltfatInt L , ltfat_normalize_t flag , double out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongltfat_normalize_tvoidPtrThunk';fcns.name{fcnNum}='ltfat_normalize_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'ltfat_normalize_t', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_ensurecomplex_array_d ( const double * in , const ltfatInt L , fftw_complex * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ensurecomplex_array_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgtphaselockhelper_d ( double * cin , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , double * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtphaselockhelper_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgtphaseunlockhelper_d ( double * cin , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , double * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtphaseunlockhelper_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_reverse_array_d ( const double * in , const ltfatInt L , double * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_reverse_array_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_conjugate_array_d ( const double * in , const ltfatInt L , double * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_conjugate_array_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_periodize_array_d ( const double * in , const ltfatInt Lin , const ltfatInt Lout , double * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_periodize_array_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fold_array_d ( const double * in , const ltfatInt Lin , const ltfatInt offset , const ltfatInt Lfold , double * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fold_array_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_findmaxinarray_d ( const double * in , const ltfatInt L , double * max , ltfatInt * idx ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_findmaxinarray_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int ltfat_findmaxinarraywrtmask_d ( const double * in , const int * mask , const ltfatInt L , double * max , ltfatInt * idx ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_findmaxinarraywrtmask_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'int32Ptr', 'long', 'doublePtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabframediag_d ( const double * g , ltfatInt gl , ltfatInt a , ltfatInt M , ltfatInt dl , double * d ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabframediag_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabdual_painless_d ( const double g [], const ltfatInt gl , const ltfatInt a , const ltfatInt M , double gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_painless_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabtight_painless_d ( const double g [], const ltfatInt gl , const ltfatInt a , const ltfatInt M , double gt []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_painless_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabpu_painless_d ( const double * g , ltfatInt gl , ltfatInt a , ltfatInt M , double * gpu ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabpu_painless_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_firwin_d ( LTFAT_FIRWIN win , int gl , double * g ); 
fcns.thunkname{fcnNum}='int32LTFAT_FIRWINint32voidPtrThunk';fcns.name{fcnNum}='ltfat_firwin_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'LTFAT_FIRWIN', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% extern fftw_plan ltfat_dct_init_d ( const ltfatInt L , const ltfatInt W , double * cout , const dct_kind kind ); 
fcns.thunkname{fcnNum}='voidPtrlonglongvoidPtrdct_kindThunk';fcns.name{fcnNum}='ltfat_dct_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fftw_plan_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'doublePtr', 'dct_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dct_d ( const double * f , const ltfatInt L , const ltfatInt W , double * cout , const dct_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglongvoidPtrdct_kindThunk';fcns.name{fcnNum}='ltfat_dct_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr', 'dct_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dct_execute_d ( const fftw_plan p , const double * f , const ltfatInt L , const ltfatInt W , double * cout , const dct_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrdct_kindThunk';fcns.name{fcnNum}='ltfat_dct_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fftw_plan_sPtr', 'doublePtr', 'long', 'long', 'doublePtr', 'dct_kind'};fcnNum=fcnNum+1;
% extern fftw_plan ltfat_dst_init_d ( const ltfatInt L , const ltfatInt W , double * cout , const dst_kind kind ); 
fcns.thunkname{fcnNum}='voidPtrlonglongvoidPtrdst_kindThunk';fcns.name{fcnNum}='ltfat_dst_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fftw_plan_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'doublePtr', 'dst_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dst_d ( const double * f , const ltfatInt L , const ltfatInt W , double * cout , const dst_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglongvoidPtrdst_kindThunk';fcns.name{fcnNum}='ltfat_dst_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr', 'dst_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dst_execute_d ( fftw_plan p , const double * f , const ltfatInt L , const ltfatInt W , double * cout , const dst_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrdst_kindThunk';fcns.name{fcnNum}='ltfat_dst_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fftw_plan_sPtr', 'doublePtr', 'long', 'long', 'doublePtr', 'dst_kind'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_d ( const double * g , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftw_complex * gf ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_init_d ( const ltfatInt L , const ltfatInt a , const ltfatInt M , unsigned flags , ltfat_wfac_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32longlonglonguint32voidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'uint32', 'ltfat_wfac_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_execute_d ( ltfat_wfac_plan_d * plan , const double * g , const ltfatInt R , fftw_complex * gf ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_wfac_plan_dPtr', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_done_d ( ltfat_wfac_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_wfac_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_d ( const fftw_complex * gf , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , double * g ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_init_d ( const ltfatInt L , const ltfatInt a , const ltfatInt M , unsigned flags , ltfat_iwfac_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32longlonglonguint32voidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'uint32', 'ltfat_iwfac_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_execute_d ( ltfat_iwfac_plan_d * plan , const fftw_complex * gf , const ltfatInt R , double * g ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_iwfac_plan_dPtr', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_done_d ( ltfat_iwfac_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_iwfac_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_col2diag_d ( const double * cin , const ltfatInt L , double * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_col2diag_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabdual_long_d ( const double g [], const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , double gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_long_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabtight_long_d ( const double g [], const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , double gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_long_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabdual_fir_d ( const double g [], const ltfatInt gl , const ltfatInt L , const ltfatInt a , const ltfatInt M , const ltfatInt gdl , double gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_fir_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabtight_fir_d ( const double g [], const ltfatInt gl , const ltfatInt L , const ltfatInt a , const ltfatInt M , const ltfatInt gtl , double gt []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_fir_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwilt_long_d ( const double * f , const double * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , double * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwilt_long_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwilt_fb_d ( const double * f , const double * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , double * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwilt_fb_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwiltiii_long_d ( const double * f , const double * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , double * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwiltiii_long_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwiltiii_fb_d ( const double * f , const double * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , double * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwiltiii_fb_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwilt_long_d ( const double * cin , const double * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , double * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwilt_long_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwilt_fb_d ( const double * cin , const double * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , double * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwilt_fb_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwiltiii_long_d ( const double * cin , const double * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , double * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwiltiii_long_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwiltiii_fb_d ( const double * cin , const double * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , double * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwiltiii_fb_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gabreassign_d ( const double * s , const double * tgrad , const double * fgrad , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , double * sr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabreassign_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbankreassign_d ( const double * s [], const double * tgrad [], const double * fgrad [], const ltfatInt N [], const double a [], const double cfreq [], const ltfatInt M , double * sr [], fbreassHints hints , fbreassOptOut * repos ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrlongvoidPtrfbreassHintsvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbankreassign_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'doublePtrPtr', 'doublePtrPtr', 'longPtr', 'doublePtr', 'doublePtr', 'long', 'doublePtrPtr', 'fbreassHints', 'fbreassOptOutPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_dc ( const fftw_complex f [], const fftw_complex g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftw_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_init_dc ( const fftw_complex f [], const fftw_complex g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftw_complex c [], const ltfat_phaseconvention ptype , unsigned flags , ltfat_dgt_long_plan_dc ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongvoidPtrltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_init_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'ltfat_phaseconvention', 'uint32', 'ltfat_dgt_long_plan_dcPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_execute_dc ( ltfat_dgt_long_plan_dc * plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_execute_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_dcPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_execute_newarray_dc ( ltfat_dgt_long_plan_dc * plan , const fftw_complex f [], fftw_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_execute_newarray_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_dcPtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_long_done_dc ( ltfat_dgt_long_plan_dc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_long_done_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_dcPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_walnut_execute_dc ( ltfat_dgt_long_plan_dc * plan , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_walnut_execute_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_long_plan_dcPtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_dc ( const fftw_complex c [], const fftw_complex g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftw_complex f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_init_dc ( fftw_complex c [], const fftw_complex g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftw_complex f [], unsigned flags , const ltfat_phaseconvention ptype , ltfat_idgt_long_plan_dc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongvoidPtruint32ltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_init_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'uint32', 'ltfat_phaseconvention', 'ltfat_idgt_long_plan_dcPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_execute_dc ( ltfat_idgt_long_plan_dc * p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_execute_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_dcPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_execute_newarray_dc ( ltfat_idgt_long_plan_dc * p , const fftw_complex c [], fftw_complex f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_execute_newarray_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_dcPtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_long_done_dc ( ltfat_idgt_long_plan_dc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_long_done_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_dcPtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_idgt_fac_dc ( const fftw_complex * c , const fftw_complex * gf , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftw_complex * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fac_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idgt_walnut_execute_dc ( ltfat_idgt_long_plan_dc * p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_walnut_execute_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_idgt_long_plan_dcPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_dc ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_init_dc ( const fftw_complex * g , const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , unsigned flags , ltfat_dgt_fb_plan_dc ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_init_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32', 'ltfat_dgt_fb_plan_dcPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_execute_dc ( const ltfat_dgt_fb_plan_dc * plan , const fftw_complex * f , const ltfatInt L , const ltfatInt W , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_execute_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_fb_plan_dcPtr', 'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_fb_done_dc ( ltfat_dgt_fb_plan_dc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_fb_done_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgt_fb_plan_dcPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_dc ( const fftw_complex * cin , const fftw_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftw_complex * f ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_init_dc ( const fftw_complex * g , const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , unsigned flags , ltfat_idgt_fb_plan_dc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_init_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32', 'ltfat_idgt_fb_plan_dcPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_execute_dc ( ltfat_idgt_fb_plan_dc * p , const fftw_complex * cin , const ltfatInt L , const ltfatInt W , fftw_complex * f ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_execute_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_fb_plan_dcPtr', 'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgt_fb_done_dc ( ltfat_idgt_fb_plan_dc ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgt_fb_done_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgt_fb_plan_dcPtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_extend_left_dc ( const fftw_complex * in , ltfatInt inLen , fftw_complex * buffer , ltfatInt buffLen , ltfatInt filtLen , ltfatExtType ext , ltfatInt a ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrlonglongltfatExtTypelongThunk';fcns.name{fcnNum}='ltfat_extend_left_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr', 'long', 'long', 'ltfatExtType', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_extend_right_dc ( const fftw_complex * in , ltfatInt inLen , fftw_complex * buffer , ltfatInt filtLen , ltfatExtType ext , ltfatInt a ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrlongltfatExtTypelongThunk';fcns.name{fcnNum}='ltfat_extend_right_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr', 'long', 'ltfatExtType', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_td_dc ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt a , const ltfatInt skip , fftw_complex * c , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_convsub_td_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_td_dc ( const fftw_complex * c , const fftw_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt a , const ltfatInt skip , fftw_complex * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_upconv_td_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_filterbank_td_dc ( const fftw_complex * f , const fftw_complex * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , fftw_complex * c [], ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_filterbank_td_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'doublePtrPtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_td_dc ( const fftw_complex * c [], const fftw_complex * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , fftw_complex * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_ifilterbank_td_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'doublePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_atrousfilterbank_td_dc ( const fftw_complex * f , const fftw_complex * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , fftw_complex * c , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_atrousfilterbank_td_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_iatrousfilterbank_td_dc ( const fftw_complex * c , const fftw_complex * g [], const ltfatInt L , const ltfatInt gl [], const ltfatInt W , const ltfatInt a [], const ltfatInt skip [], const ltfatInt M , fftw_complex * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrvoidPtrlongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_iatrousfilterbank_td_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtrPtr', 'long', 'longPtr', 'long', 'longPtr', 'longPtr', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_atrousconvsub_td_dc ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt ga , ltfatInt skip , fftw_complex * c , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_atrousconvsub_td_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern void ltfat_atrousupconv_td_dc ( const fftw_complex * c , const fftw_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt ga , const ltfatInt skip , fftw_complex * f , ltfatExtType ext ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrltfatExtTypeThunk';fcns.name{fcnNum}='ltfat_atrousupconv_td_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'ltfatExtType'};fcnNum=fcnNum+1;
% extern ltfat_gga_plan_dc ltfat_gga_init_dc ( const double * indVecPtr , const ltfatInt M , const ltfatInt L ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrlonglongThunk';fcns.name{fcnNum}='ltfat_gga_init_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_gga_plan_struct_dcPtr'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_gga_done_dc ( ltfat_gga_plan_dc plan ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_gga_done_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_gga_plan_struct_dcPtr'};fcnNum=fcnNum+1;
% extern void ltfat_gga_dc ( const fftw_complex * fPtr , const double * indVecPtr , const ltfatInt L , const ltfatInt W , const ltfatInt M , fftw_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gga_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gga_execute_dc ( ltfat_gga_plan_dc p , const fftw_complex * fPtr , const ltfatInt W , fftw_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gga_execute_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_gga_plan_struct_dcPtr', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_dc ( const fftw_complex * fPtr , const ltfatInt L , const ltfatInt W , const ltfatInt K , const double deltao , const double o , fftw_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglongdoubledoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'double', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_execute_dc ( ltfat_chzt_plan_dc p , const fftw_complex * fPtr , const ltfatInt W , fftw_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_execute_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_chzt_plan_struct_dcPtr', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern ltfat_chzt_plan_dc ltfat_chzt_init_dc ( const ltfatInt K , const ltfatInt L , const double deltao , const double o , const unsigned fftw_flags , czt_ffthint hint ); 
fcns.thunkname{fcnNum}='voidPtrlonglongdoubledoubleuint32czt_ffthintThunk';fcns.name{fcnNum}='ltfat_chzt_init_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_chzt_plan_struct_dcPtr'; fcns.RHS{fcnNum}={'long', 'long', 'double', 'double', 'uint32', 'czt_ffthint'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_done_dc ( ltfat_chzt_plan_dc p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_done_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_chzt_plan_struct_dcPtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_fac_dc ( const fftw_complex * fPtr , const ltfatInt L , const ltfatInt W , const ltfatInt K , const double deltao , const double o , fftw_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglongdoubledoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_fac_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'double', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_chzt_fac_execute_dc ( ltfat_chzt_plan_dc p , const fftw_complex * fPtr , const ltfatInt W , fftw_complex * cPtr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_chzt_fac_execute_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_chzt_plan_struct_dcPtr', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern ltfat_chzt_plan_dc ltfat_chzt_fac_init_dc ( const ltfatInt K , const ltfatInt L , const double deltao , const double o , const unsigned fftw_flags , czt_ffthint hint ); 
fcns.thunkname{fcnNum}='voidPtrlonglongdoubledoubleuint32czt_ffthintThunk';fcns.name{fcnNum}='ltfat_chzt_fac_init_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_chzt_plan_struct_dcPtr'; fcns.RHS{fcnNum}={'long', 'long', 'double', 'double', 'uint32', 'czt_ffthint'};fcnNum=fcnNum+1;
% extern int ltfat_circshift_dc ( const fftw_complex in [], const ltfatInt L , const ltfatInt shift , fftw_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_circshift_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftshift_dc ( const fftw_complex in [], ltfatInt L , fftw_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftshift_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_ifftshift_dc ( const fftw_complex in [], ltfatInt L , fftw_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifftshift_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fir2long_dc ( const fftw_complex in [], const ltfatInt Lfir , const ltfatInt Llong , fftw_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fir2long_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_long2fir_dc ( const fftw_complex in [], const ltfatInt Llong , const ltfatInt Lfir , fftw_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_long2fir_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_normalize_dc ( const fftw_complex in [], const ltfatInt L , ltfat_normalize_t flag , fftw_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongltfat_normalize_tvoidPtrThunk';fcns.name{fcnNum}='ltfat_normalize_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'ltfat_normalize_t', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_ensurecomplex_array_dc ( const fftw_complex * in , const ltfatInt L , fftw_complex * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ensurecomplex_array_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgtphaselockhelper_dc ( fftw_complex * cin , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtphaselockhelper_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgtphaseunlockhelper_dc ( fftw_complex * cin , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtphaseunlockhelper_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_reverse_array_dc ( const fftw_complex * in , const ltfatInt L , fftw_complex * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_reverse_array_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_conjugate_array_dc ( const fftw_complex * in , const ltfatInt L , fftw_complex * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_conjugate_array_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_periodize_array_dc ( const fftw_complex * in , const ltfatInt Lin , const ltfatInt Lout , fftw_complex * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_periodize_array_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fold_array_dc ( const fftw_complex * in , const ltfatInt Lin , const ltfatInt offset , const ltfatInt Lfold , fftw_complex * out ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fold_array_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_findmaxinarray_dc ( const fftw_complex * in , const ltfatInt L , fftw_complex * max , ltfatInt * idx ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_findmaxinarray_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int ltfat_findmaxinarraywrtmask_dc ( const fftw_complex * in , const int * mask , const ltfatInt L , fftw_complex * max , ltfatInt * idx ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_findmaxinarraywrtmask_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'int32Ptr', 'long', 'doublePtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabframediag_dc ( const fftw_complex * g , ltfatInt gl , ltfatInt a , ltfatInt M , ltfatInt dl , fftw_complex * d ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabframediag_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabdual_painless_dc ( const fftw_complex g [], const ltfatInt gl , const ltfatInt a , const ltfatInt M , fftw_complex gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_painless_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabtight_painless_dc ( const fftw_complex g [], const ltfatInt gl , const ltfatInt a , const ltfatInt M , fftw_complex gt []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_painless_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabpu_painless_dc ( const fftw_complex * g , ltfatInt gl , ltfatInt a , ltfatInt M , fftw_complex * gpu ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabpu_painless_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_firwin_dc ( LTFAT_FIRWIN win , int gl , fftw_complex * g ); 
fcns.thunkname{fcnNum}='int32LTFAT_FIRWINint32voidPtrThunk';fcns.name{fcnNum}='ltfat_firwin_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'LTFAT_FIRWIN', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% extern fftw_plan ltfat_dct_init_dc ( const ltfatInt L , const ltfatInt W , fftw_complex * cout , const dct_kind kind ); 
fcns.thunkname{fcnNum}='voidPtrlonglongvoidPtrdct_kindThunk';fcns.name{fcnNum}='ltfat_dct_init_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fftw_plan_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'doublePtr', 'dct_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dct_dc ( const fftw_complex * f , const ltfatInt L , const ltfatInt W , fftw_complex * cout , const dct_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglongvoidPtrdct_kindThunk';fcns.name{fcnNum}='ltfat_dct_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr', 'dct_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dct_execute_dc ( const fftw_plan p , const fftw_complex * f , const ltfatInt L , const ltfatInt W , fftw_complex * cout , const dct_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrdct_kindThunk';fcns.name{fcnNum}='ltfat_dct_execute_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fftw_plan_sPtr', 'doublePtr', 'long', 'long', 'doublePtr', 'dct_kind'};fcnNum=fcnNum+1;
% extern fftw_plan ltfat_dst_init_dc ( const ltfatInt L , const ltfatInt W , fftw_complex * cout , const dst_kind kind ); 
fcns.thunkname{fcnNum}='voidPtrlonglongvoidPtrdst_kindThunk';fcns.name{fcnNum}='ltfat_dst_init_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fftw_plan_sPtr'; fcns.RHS{fcnNum}={'long', 'long', 'doublePtr', 'dst_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dst_dc ( const fftw_complex * f , const ltfatInt L , const ltfatInt W , fftw_complex * cout , const dst_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglongvoidPtrdst_kindThunk';fcns.name{fcnNum}='ltfat_dst_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr', 'dst_kind'};fcnNum=fcnNum+1;
% extern void ltfat_dst_execute_dc ( fftw_plan p , const fftw_complex * f , const ltfatInt L , const ltfatInt W , fftw_complex * cout , const dst_kind kind ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrdst_kindThunk';fcns.name{fcnNum}='ltfat_dst_execute_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fftw_plan_sPtr', 'doublePtr', 'long', 'long', 'doublePtr', 'dst_kind'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_dc ( const fftw_complex * g , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftw_complex * gf ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_init_dc ( const ltfatInt L , const ltfatInt a , const ltfatInt M , unsigned flags , ltfat_wfac_plan_dc ** plan ); 
fcns.thunkname{fcnNum}='int32longlonglonguint32voidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_init_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'uint32', 'ltfat_wfac_plan_dcPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_execute_dc ( ltfat_wfac_plan_dc * plan , const fftw_complex * g , const ltfatInt R , fftw_complex * gf ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_execute_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_wfac_plan_dcPtr', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_wfac_done_dc ( ltfat_wfac_plan_dc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_wfac_done_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_wfac_plan_dcPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_dc ( const fftw_complex * gf , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftw_complex * g ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_init_dc ( const ltfatInt L , const ltfatInt a , const ltfatInt M , unsigned flags , ltfat_iwfac_plan_dc ** plan ); 
fcns.thunkname{fcnNum}='int32longlonglonguint32voidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_init_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'uint32', 'ltfat_iwfac_plan_dcPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_execute_dc ( ltfat_iwfac_plan_dc * plan , const fftw_complex * gf , const ltfatInt R , fftw_complex * g ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_execute_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_iwfac_plan_dcPtr', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_iwfac_done_dc ( ltfat_iwfac_plan_dc ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_iwfac_done_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_iwfac_plan_dcPtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_col2diag_dc ( const fftw_complex * cin , const ltfatInt L , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_col2diag_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabdual_long_dc ( const fftw_complex g [], const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftw_complex gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_long_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabtight_long_dc ( const fftw_complex g [], const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftw_complex gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_long_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabdual_fir_dc ( const fftw_complex g [], const ltfatInt gl , const ltfatInt L , const ltfatInt a , const ltfatInt M , const ltfatInt gdl , fftw_complex gd []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_fir_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_gabtight_fir_dc ( const fftw_complex g [], const ltfatInt gl , const ltfatInt L , const ltfatInt a , const ltfatInt M , const ltfatInt gtl , fftw_complex gt []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_fir_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwilt_long_dc ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwilt_long_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwilt_fb_dc ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwilt_fb_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwiltiii_long_dc ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwiltiii_long_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dwiltiii_fb_dc ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dwiltiii_fb_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwilt_long_dc ( const fftw_complex * cin , const fftw_complex * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , fftw_complex * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwilt_long_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwilt_fb_dc ( const fftw_complex * cin , const fftw_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , fftw_complex * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwilt_fb_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwiltiii_long_dc ( const fftw_complex * cin , const fftw_complex * g , const ltfatInt L , const ltfatInt W , const ltfatInt M , fftw_complex * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwiltiii_long_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_idwiltiii_fb_dc ( const fftw_complex * cin , const fftw_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt M , fftw_complex * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idwiltiii_fb_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gabreassign_dc ( const fftw_complex * s , const double * tgrad , const double * fgrad , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftw_complex * sr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabreassign_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbankreassign_dc ( const fftw_complex * s [], const double * tgrad [], const double * fgrad [], const ltfatInt N [], const double a [], const double cfreq [], const ltfatInt M , fftw_complex * sr [], fbreassHints hints , fbreassOptOut * repos ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrlongvoidPtrfbreassHintsvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbankreassign_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'doublePtrPtr', 'doublePtrPtr', 'longPtr', 'doublePtr', 'doublePtr', 'long', 'doublePtrPtr', 'fbreassHints', 'fbreassOptOutPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_long_d ( const double f [], const double g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftw_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_long_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_long_init_d ( const double f [], const double g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftw_complex c [], const ltfat_phaseconvention ptype , unsigned flags , ltfat_dgtreal_long_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongvoidPtrltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_long_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'ltfat_phaseconvention', 'uint32', 'ltfat_dgtreal_long_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_long_execute_d ( ltfat_dgtreal_long_plan_d * plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_long_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgtreal_long_plan_dPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_long_execute_newarray_d ( ltfat_dgtreal_long_plan_d * plan , const double * f , fftw_complex * c ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_long_execute_newarray_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgtreal_long_plan_dPtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_long_done_d ( ltfat_dgtreal_long_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_long_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgtreal_long_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_walnut_plan_d ( ltfat_dgtreal_long_plan_d * plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_walnut_plan_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgtreal_long_plan_dPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_long_d ( const fftw_complex c [], const double g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , double f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_long_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_long_init_d ( fftw_complex c [], const double g [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , double f [], const ltfat_phaseconvention ptype , unsigned flags , ltfat_idgtreal_long_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglongvoidPtrltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_long_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr', 'ltfat_phaseconvention', 'uint32', 'ltfat_idgtreal_long_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_long_execute_d ( ltfat_idgtreal_long_plan_d * plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_long_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgtreal_long_plan_dPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_long_execute_newarray_d ( ltfat_idgtreal_long_plan_d * p , const fftw_complex * c , double * f ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_long_execute_newarray_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgtreal_long_plan_dPtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_long_done_d ( ltfat_idgtreal_long_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_long_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgtreal_long_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_idgtreal_walnut_execute_d ( ltfat_idgtreal_long_plan_d * p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_walnut_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_idgtreal_long_plan_dPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_fb_d ( const double f [], const double g [], const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , fftw_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_fb_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_fb_init_d ( const double g [], const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , unsigned flags , ltfat_dgtreal_fb_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_fb_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32', 'ltfat_dgtreal_fb_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_fb_execute_d ( ltfat_dgtreal_fb_plan_d * plan , const double f [], const ltfatInt L , const ltfatInt W , fftw_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_fb_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgtreal_fb_plan_dPtr', 'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_fb_done_d ( ltfat_dgtreal_fb_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_fb_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_dgtreal_fb_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_fb_d ( const fftw_complex c [], const double g [], const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , double f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_fb_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_fb_init_d ( const double g [], const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfat_phaseconvention ptype , unsigned flags , ltfat_idgtreal_fb_plan_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglongltfat_phaseconventionuint32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_fb_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32', 'ltfat_idgtreal_fb_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_fb_execute_d ( ltfat_idgtreal_fb_plan_d * plan , const fftw_complex c [], const ltfatInt L , const ltfatInt W , double f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_fb_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgtreal_fb_plan_dPtr', 'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_idgtreal_fb_done_d ( ltfat_idgtreal_fb_plan_d ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_idgtreal_fb_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_idgtreal_fb_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern ltfat_dgt_multi_plan_d ltfat_dgt_multi_init_d ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt Lg , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt lt1 , const ltfatInt lt2 , fftw_complex * c , unsigned flags ); 
fcns.thunkname{fcnNum}='ltfat_dgt_multi_plan_dvoidPtrvoidPtrlonglonglonglonglonglonglongvoidPtruint32Thunk';fcns.name{fcnNum}='ltfat_dgt_multi_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_dgt_multi_plan_d'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'doublePtr', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_multi_execute_d ( const ltfat_dgt_multi_plan_d plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_multi_plan_dThunk';fcns.name{fcnNum}='ltfat_dgt_multi_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_multi_plan_d'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_multi_done_d ( ltfat_dgt_multi_plan_d plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_multi_plan_dThunk';fcns.name{fcnNum}='ltfat_dgt_multi_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_multi_plan_d'};fcnNum=fcnNum+1;
% extern void ltfat_nonsepwin2multi_d ( const fftw_complex * g , const ltfatInt L , const ltfatInt Lg , const ltfatInt a , const ltfatInt M , const ltfatInt lt1 , const ltfatInt lt2 , fftw_complex * mwin ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_nonsepwin2multi_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_multi_d ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt Lg , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt lt1 , const ltfatInt lt2 , fftw_complex * c ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_multi_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern ltfat_dgt_shear_plan_d ltfat_dgt_shear_init_d ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt s0 , const ltfatInt s1 , const ltfatInt br , fftw_complex * cout , unsigned flags ); 
fcns.thunkname{fcnNum}='ltfat_dgt_shear_plan_dvoidPtrvoidPtrlonglonglonglonglonglonglongvoidPtruint32Thunk';fcns.name{fcnNum}='ltfat_dgt_shear_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_dgt_shear_plan_d'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'doublePtr', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_shear_execute_d ( const ltfat_dgt_shear_plan_d plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_shear_plan_dThunk';fcns.name{fcnNum}='ltfat_dgt_shear_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_shear_plan_d'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_shear_done_d ( ltfat_dgt_shear_plan_d plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_shear_plan_dThunk';fcns.name{fcnNum}='ltfat_dgt_shear_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_shear_plan_d'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_shear_d ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt s0 , const ltfatInt s1 , const ltfatInt br , fftw_complex * c ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_shear_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_pchirp_d ( const long long L , const long long n , fftw_complex * g ); 
fcns.thunkname{fcnNum}='voidint64int64voidPtrThunk';fcns.name{fcnNum}='ltfat_pchirp_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int64', 'int64', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftcircshift_dc ( const fftw_complex in [], const ltfatInt L , const double shift , fftw_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongdoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_fftcircshift_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftfftshift_dc ( const fftw_complex in [], const ltfatInt L , fftw_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftfftshift_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftifftshift_dc ( const fftw_complex in [], const ltfatInt L , fftw_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftifftshift_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftrealcircshift_dc ( const fftw_complex in [], const ltfatInt L , const double shift , fftw_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongdoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_fftrealcircshift_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftrealfftshift_dc ( const fftw_complex in [], const ltfatInt L , fftw_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftrealfftshift_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_fftrealifftshift_dc ( const fftw_complex in [], const ltfatInt L , fftw_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftrealifftshift_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_real2complex_array_d ( const double in [], const ltfatInt L , fftw_complex out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_real2complex_array_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_complex2real_array_d ( const fftw_complex in [], const ltfatInt L , double out []); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_complex2real_array_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_phaselock_dc ( const fftw_complex cFreqinv [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftw_complex cTimeinv []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_phaselock_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgt_phaseunlock_dc ( const fftw_complex cTimeinv [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftw_complex cFreqinv []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_phaseunlock_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_phaselock_dc ( const fftw_complex cFreqinv [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftw_complex cTimeinv []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_phaselock_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_dgtreal_phaseunlock_dc ( const fftw_complex cTimeinv [], const ltfatInt L , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftw_complex cFreqinv []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_phaseunlock_dc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% int ltfat_rtdgtreal_commoninit_d ( const double * g , const ltfatInt gl , const ltfatInt M , const rtdgt_phasetype ptype , const ltfat_transformdirection tradir , ltfat_rtdgtreal_plan_d ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongrtdgt_phasetypeltfat_transformdirectionvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_commoninit_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'rtdgt_phasetype', 'ltfat_transformdirection', 'ltfat_rtdgtreal_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_init_d ( const double g [], const ltfatInt gl , const ltfatInt M , const rtdgt_phasetype ptype , ltfat_rtdgtreal_plan_d ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongrtdgt_phasetypevoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'rtdgt_phasetype', 'ltfat_rtdgtreal_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_execute_d ( const ltfat_rtdgtreal_plan_d * p , const double f [], const ltfatInt W , fftw_complex c []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_plan_dPtr', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_done_d ( ltfat_rtdgtreal_plan_d ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_init_d ( const double g [], const ltfatInt gl , const ltfatInt M , const rtdgt_phasetype ptype , ltfat_rtdgtreal_plan_d ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongrtdgt_phasetypevoidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'rtdgt_phasetype', 'ltfat_rtdgtreal_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_execute_d ( const ltfat_rtidgtreal_plan_d * p , const fftw_complex c [], const ltfatInt W , double f []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_plan_dPtr', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_done_d ( ltfat_rtidgtreal_plan_d ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_plan_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_fifo_init_d ( ltfatInt fifoLen , ltfatInt procDelay , ltfatInt gl , ltfatInt a , ltfatInt Wmax , ltfat_rtdgtreal_fifo_state_d ** p ); 
fcns.thunkname{fcnNum}='int32longlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_fifo_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'long', 'long', 'ltfat_rtdgtreal_fifo_state_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_fifo_write_d ( ltfat_rtdgtreal_fifo_state_d * p , const double * buf [], const ltfatInt bufLen , const ltfatInt W ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_fifo_write_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_fifo_state_dPtr', 'doublePtrPtr', 'long', 'long'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_fifo_read_d ( ltfat_rtdgtreal_fifo_state_d * p , double buf []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_fifo_read_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_fifo_state_dPtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_fifo_done_d ( ltfat_rtdgtreal_fifo_state_d ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_fifo_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_fifo_state_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_fifo_init_d ( ltfatInt fifoLen , ltfatInt gl , ltfatInt a , ltfatInt Wmax , ltfat_rtidgtreal_fifo_state_d ** p ); 
fcns.thunkname{fcnNum}='int32longlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_fifo_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'long', 'ltfat_rtidgtreal_fifo_state_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_fifo_write_d ( ltfat_rtidgtreal_fifo_state_d * p , const double buf []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_fifo_write_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtidgtreal_fifo_state_dPtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_fifo_read_d ( ltfat_rtidgtreal_fifo_state_d * p , const ltfatInt bufLen , const ltfatInt W , double * buf []); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_fifo_read_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtidgtreal_fifo_state_dPtr', 'long', 'long', 'doublePtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtidgtreal_fifo_done_d ( ltfat_rtidgtreal_fifo_state_d ** p ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_rtidgtreal_fifo_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtidgtreal_fifo_state_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_processor_init_d ( const double ga [], const ltfatInt gal , const double gs [], const ltfatInt gsl , const ltfatInt a , const ltfatInt M , const ltfatInt Wmax , ltfat_rtdgtreal_processor_callback_d * callback , void * userdata , ltfat_rtdgtreal_processor_state_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrlonglonglonglongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_processor_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'doublePtr', 'long', 'long', 'long', 'long', 'FcnPtrPtr', 'voidPtr', 'ltfat_rtdgtreal_processor_state_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_processor_init_win_d ( LTFAT_FIRWIN win , const ltfatInt gl , const ltfatInt a , const ltfatInt M , const ltfatInt Wmax , ltfat_rtdgtreal_processor_callback_d * callback , void * userdata , ltfat_rtdgtreal_processor_state_d ** plan ); 
fcns.thunkname{fcnNum}='int32LTFAT_FIRWINlonglonglonglongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_processor_init_win_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'LTFAT_FIRWIN', 'long', 'long', 'long', 'long', 'FcnPtrPtr', 'voidPtr', 'ltfat_rtdgtreal_processor_state_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_processor_execute_d ( ltfat_rtdgtreal_processor_state_d * p , const double * in [], const ltfatInt L , const ltfatInt W , double * out []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_processor_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_processor_state_dPtr', 'doublePtrPtr', 'long', 'long', 'doublePtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_processor_execute_compact_d ( ltfat_rtdgtreal_processor_state_d * p , const double in [], const ltfatInt len , const ltfatInt chanNo , double out []); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_processor_execute_compact_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_processor_state_dPtr', 'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_processor_done_d ( ltfat_rtdgtreal_processor_state_d ** plan ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_processor_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_processor_state_dPtrPtr'};fcnNum=fcnNum+1;
% extern int ltfat_rtdgtreal_processor_setcallback_d ( ltfat_rtdgtreal_processor_state_d * p , ltfat_rtdgtreal_processor_callback_d * callback , void * userdata ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_rtdgtreal_processor_setcallback_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ltfat_rtdgtreal_processor_state_dPtr', 'FcnPtrPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern void ltfat_default_rtdgtreal_processor_callback_d ( void * userdata , const fftw_complex in [], const int M2 , const int W , fftw_complex out []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='ltfat_default_rtdgtreal_processor_callback_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'doublePtr', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_wfacreal_d ( const double * g , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftw_complex * gf ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_wfacreal_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_iwfacreal_d ( const fftw_complex * gf , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , double * g ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_iwfacreal_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gabdual_fac_d ( const fftw_complex * g , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftw_complex * gdualf ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdual_fac_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gabdualreal_fac_d ( const fftw_complex * g , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftw_complex * gdualf ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabdualreal_fac_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gabtight_fac_d ( const fftw_complex * gf , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftw_complex * gtightf ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtight_fac_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_gabtightreal_fac_d ( const fftw_complex * gf , const ltfatInt L , const ltfatInt R , const ltfatInt a , const ltfatInt M , fftw_complex * gtightf ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_gabtightreal_fac_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_ola_d ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt bl , const ltfat_phaseconvention ptype , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_ola_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgtreal_ola_d ( const double * f , const double * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt bl , const ltfat_phaseconvention ptype , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglonglonglongltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_ola_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_shearola_d ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt s0 , const ltfatInt s1 , const ltfatInt br , const ltfatInt bl , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglonglonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_shearola_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern fftw_plan ltfat_fftreal_init_d ( double * f , const ltfatInt L , const ltfatInt W , fftw_complex * cout , unsigned flag ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrlonglongvoidPtruint32Thunk';fcns.name{fcnNum}='ltfat_fftreal_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fftw_plan_sPtr'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_fftreal_execute_d ( fftw_plan p , double * f , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftreal_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fftw_plan_sPtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_fftreal_d ( double * f , const ltfatInt L , const ltfatInt W , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_fftreal_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern fftw_plan ltfat_ifftreal_init_d ( fftw_complex * c , const ltfatInt L , const ltfatInt W , double * f , unsigned flag ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrlonglongvoidPtruint32Thunk';fcns.name{fcnNum}='ltfat_ifftreal_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='fftw_plan_sPtr'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_ifftreal_execute_d ( fftw_plan , fftw_complex * c , const ltfatInt L , const ltfatInt W , double * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifftreal_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'fftw_plan_sPtr', 'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_ifftreal_d ( fftw_complex * c , const ltfatInt L , const ltfatInt W , double * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrlonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifftreal_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_ufilterbank_fft_d ( const fftw_complex * f , const fftw_complex * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ufilterbank_fft_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbank_fft_d ( const fftw_complex * F , const fftw_complex * G [], const ltfatInt L , const ltfatInt W , const ltfatInt a [], const ltfatInt M , fftw_complex * cout []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbank_fft_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtrPtr', 'long', 'long', 'longPtr', 'long', 'doublePtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbank_fft_execute_d ( ltfat_convsub_fft_plan_d p [], const fftw_complex * F , const fftw_complex * G [], const ltfatInt M , fftw_complex * cout []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbank_fft_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_convsub_fft_plan_struct_dPtrPtr', 'doublePtr', 'doublePtrPtr', 'long', 'doublePtrPtr'};fcnNum=fcnNum+1;
% extern ltfat_convsub_fft_plan_d ltfat_convsub_fft_init_d ( const ltfatInt L , const ltfatInt W , const ltfatInt a , const fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fft_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_convsub_fft_plan_struct_dPtr'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_fft_done_d ( ltfat_convsub_fft_plan_d p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fft_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_convsub_fft_plan_struct_dPtr'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_fft_execute_d ( const ltfat_convsub_fft_plan_d p , const fftw_complex * F , const fftw_complex * G , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fft_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_convsub_fft_plan_struct_dPtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_fft_d ( const fftw_complex * F , const fftw_complex * G , const ltfatInt L , const ltfatInt W , const ltfatInt a , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fft_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbank_fftbl_d ( const fftw_complex * F , const fftw_complex * G [], const ltfatInt L , const ltfatInt Gl [], const ltfatInt W , const double a [], const ltfatInt M , const ltfatInt foff [], const int realonly [], fftw_complex * cout []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrlongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbank_fftbl_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtrPtr', 'long', 'longPtr', 'long', 'doublePtr', 'long', 'longPtr', 'int32Ptr', 'doublePtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbank_fftbl_execute_d ( ltfat_convsub_fftbl_plan_d p [], const fftw_complex * F , const fftw_complex * G [], const ltfatInt M , const ltfatInt foff [], const int realonly [], fftw_complex * cout []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbank_fftbl_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_convsub_fftbl_plan_struct_dPtrPtr', 'doublePtr', 'doublePtrPtr', 'long', 'longPtr', 'int32Ptr', 'doublePtrPtr'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_fft_execute_d ( ltfat_upconv_fft_plan_d p [], const fftw_complex * cin [], const fftw_complex * G [], const ltfatInt M , fftw_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifilterbank_fft_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fft_plan_struct_dPtrPtr', 'doublePtrPtr', 'doublePtrPtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern ltfat_convsub_fftbl_plan_d ltfat_convsub_fftbl_init_d ( const ltfatInt L , const ltfatInt Gl , const ltfatInt W , const double a , const fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidPtrlonglonglongdoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fftbl_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_convsub_fftbl_plan_struct_dPtr'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% extern ltfat_convsub_fftbl_plan_d ltfat_convsub_fftbl_init_no_ifft_plan_d ( const ltfatInt L , const ltfatInt Gl , const ltfatInt W , const double a ); 
fcns.thunkname{fcnNum}='voidPtrlonglonglongdoubleThunk';fcns.name{fcnNum}='ltfat_convsub_fftbl_init_no_ifft_plan_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_convsub_fftbl_plan_struct_dPtr'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'double'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_fftbl_done_d ( ltfat_convsub_fftbl_plan_d p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fftbl_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_convsub_fftbl_plan_struct_dPtr'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_fftbl_execute_d ( const ltfat_convsub_fftbl_plan_d p , const fftw_complex * F , const fftw_complex * G , const ltfatInt foff , const int realonly , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongint32voidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fftbl_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_convsub_fftbl_plan_struct_dPtr', 'doublePtr', 'doublePtr', 'long', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_convsub_fftbl_d ( const fftw_complex * F , const fftw_complex * G , const ltfatInt L , const ltfatInt Gl , const ltfatInt W , const double a , const ltfatInt foff , const int realonly , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongdoublelongint32voidPtrThunk';fcns.name{fcnNum}='ltfat_convsub_fftbl_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'double', 'long', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_fft_d ( const fftw_complex * cin [], const fftw_complex * G [], const ltfatInt L , const ltfatInt W , const ltfatInt a [], const ltfatInt M , fftw_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglongvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifilterbank_fft_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'doublePtrPtr', 'long', 'long', 'longPtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_fft_execute_d ( ltfat_upconv_fft_plan_d p [], const fftw_complex * cin [], const fftw_complex * G [], const ltfatInt M , fftw_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifilterbank_fft_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fft_plan_struct_dPtrPtr', 'doublePtrPtr', 'doublePtrPtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_fft_d ( const fftw_complex * cin , const fftw_complex * G , const ltfatInt L , const ltfatInt W , const ltfatInt a , fftw_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_upconv_fft_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern ltfat_upconv_fft_plan_d ltfat_upconv_fft_init_d ( const ltfatInt L , const ltfatInt W , const ltfatInt a ); 
fcns.thunkname{fcnNum}='voidPtrlonglonglongThunk';fcns.name{fcnNum}='ltfat_upconv_fft_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_upconv_fft_plan_struct_dPtr'; fcns.RHS{fcnNum}={'long', 'long', 'long'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_fft_execute_d ( ltfat_upconv_fft_plan_d p , const fftw_complex * cin , const fftw_complex * G , fftw_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_upconv_fft_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fft_plan_struct_dPtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_fft_done_d ( ltfat_upconv_fft_plan_d p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_upconv_fft_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fft_plan_struct_dPtr'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_fftbl_d ( const fftw_complex * cin [], const fftw_complex * G [], const ltfatInt L , const ltfatInt Gl [], const ltfatInt W , const double a [], const ltfatInt M , const ptrdiff_t foff [], const int realonly [], fftw_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongvoidPtrlongvoidPtrlongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifilterbank_fftbl_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'doublePtrPtr', 'long', 'longPtr', 'long', 'doublePtr', 'long', 'longPtr', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_ifilterbank_fftbl_execute_d ( ltfat_upconv_fftbl_plan_d p [], const fftw_complex * cin [], const fftw_complex * G [], const ltfatInt M , const ltfatInt foff [], const int realonly [], fftw_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_ifilterbank_fftbl_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fftbl_plan_struct_dPtrPtr', 'doublePtrPtr', 'doublePtrPtr', 'long', 'longPtr', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_fftbl_d ( const fftw_complex * cin , const fftw_complex * G , const ltfatInt L , const ltfatInt Gl , const ltfatInt W , const double a , const ptrdiff_t foff , const int realonly , fftw_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglongdoublelongint32voidPtrThunk';fcns.name{fcnNum}='ltfat_upconv_fftbl_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'double', 'long', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% extern ltfat_upconv_fftbl_plan_d ltfat_upconv_fftbl_init_d ( const ltfatInt L , const ltfatInt Gl , const ltfatInt W , const double a ); 
fcns.thunkname{fcnNum}='voidPtrlonglonglongdoubleThunk';fcns.name{fcnNum}='ltfat_upconv_fftbl_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_upconv_fftbl_plan_struct_dPtr'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'double'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_fftbl_done_d ( ltfat_upconv_fftbl_plan_d p ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_upconv_fftbl_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fftbl_plan_struct_dPtr'};fcnNum=fcnNum+1;
% extern void ltfat_upconv_fftbl_execute_d ( const ltfat_upconv_fftbl_plan_d p , const fftw_complex * cin , const fftw_complex * G , const ptrdiff_t foff , const int realonly , fftw_complex * F ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongint32voidPtrThunk';fcns.name{fcnNum}='ltfat_upconv_fftbl_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_upconv_fftbl_plan_struct_dPtr', 'doublePtr', 'doublePtr', 'long', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_pgauss_d ( const ltfatInt L , const double w , const double c_t , double * g ); 
fcns.thunkname{fcnNum}='int32longdoubledoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_pgauss_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'double', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% extern int ltfat_pgauss_cmplx_d ( const ltfatInt L , const double w , const double c_t , const double c_f , fftw_complex * g ); 
fcns.thunkname{fcnNum}='int32longdoubledoubledoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_pgauss_cmplx_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'double', 'double', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_pfilt_fir_rr_d ( const double * f , const double * g , const ltfatInt L , const ltfatInt gl , const ltfatInt W , const ltfatInt a , double * cout ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlonglonglonglongvoidPtrThunk';fcns.name{fcnNum}='ltfat_pfilt_fir_rr_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern ltfat_heapinttask_d * ltfat_heapinttask_init_d ( const ltfatInt height , const ltfatInt N , const ltfatInt initheapsize , const double * s , int do_real ); 
fcns.thunkname{fcnNum}='voidPtrlonglonglongvoidPtrint32Thunk';fcns.name{fcnNum}='ltfat_heapinttask_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_heapinttask_dPtr'; fcns.RHS{fcnNum}={'long', 'long', 'long', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% extern void ltfat_heapint_execute_d ( ltfat_heapinttask_d * hit , const double * tgradw , const double * fgradw , double * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_heapint_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_heapinttask_dPtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_heapinttask_done_d ( ltfat_heapinttask_d * hit ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='ltfat_heapinttask_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_heapinttask_dPtr'};fcnNum=fcnNum+1;
% extern void ltfat_heapinttask_resetmax_d ( ltfat_heapinttask_d * hit , const double * news , const double tol ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrdoubleThunk';fcns.name{fcnNum}='ltfat_heapinttask_resetmax_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_heapinttask_dPtr', 'doublePtr', 'double'};fcnNum=fcnNum+1;
% extern void ltfat_heapinttask_resetmask_d ( ltfat_heapinttask_d * hit , const int * mask , const double * news , const double tol , const int do_log ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrdoubleint32Thunk';fcns.name{fcnNum}='ltfat_heapinttask_resetmask_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_heapinttask_dPtr', 'int32Ptr', 'doublePtr', 'double', 'int32'};fcnNum=fcnNum+1;
% extern int * ltfat_heapinttask_get_mask_d ( ltfat_heapinttask_d * hit ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_heapinttask_get_mask_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32Ptr'; fcns.RHS{fcnNum}={'ltfat_heapinttask_dPtr'};fcnNum=fcnNum+1;
% extern void ltfat_heapint_d ( const double * s , const double * tgradw , const double * fgradw , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , const double tol , double * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlonglonglonglongdoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_heapint_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_heapint_relgrad_d ( const double * s , const double * tgrad , const double * fgrad , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , const double tol , ltfat_phaseconvention phasetype , double * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlonglonglonglongdoubleltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_heapint_relgrad_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'double', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_maskedheapint_d ( const double * c , const double * tgradw , const double * fgradw , const int * mask , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , double tol , double * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlonglonglonglongdoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_maskedheapint_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'long', 'long', 'long', 'long', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_maskedheapint_relgrad_d ( const double * c , const double * tgrad , const double * fgrad , const int * mask , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , double tol , ltfat_phaseconvention phasetype , double * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlonglonglonglongdoubleltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_maskedheapint_relgrad_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'long', 'long', 'long', 'long', 'double', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_heapintreal_d ( const double * s , const double * tgradw , const double * fgradw , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , const double tol , double * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlonglonglonglongdoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_heapintreal_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_heapintreal_relgrad_d ( const double * s , const double * tgradw , const double * fgradw , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , const double tol , ltfat_phaseconvention phasetype , double * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlonglonglonglongdoubleltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_heapintreal_relgrad_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'long', 'long', 'long', 'long', 'double', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_maskedheapintreal_d ( const double * s , const double * tgrad , const double * fgrad , const int * mask , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , double tol , double * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlonglonglonglongdoublevoidPtrThunk';fcns.name{fcnNum}='ltfat_maskedheapintreal_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'long', 'long', 'long', 'long', 'double', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_maskedheapintreal_relgrad_d ( const double * s , const double * tgradw , const double * fgradw , const int * mask , const ltfatInt a , const ltfatInt M , const ltfatInt L , const ltfatInt W , double tol , ltfat_phaseconvention phasetype , double * phase ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlonglonglonglongdoubleltfat_phaseconventionvoidPtrThunk';fcns.name{fcnNum}='ltfat_maskedheapintreal_relgrad_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'long', 'long', 'long', 'long', 'double', 'ltfat_phaseconvention', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_filterbankphasegrad_d ( const fftw_complex * c [], const fftw_complex * ch [], const fftw_complex * cd [], const ltfatInt M , const ltfatInt N [], const ltfatInt L , const double minlvl , double * tgrad [], double * fgrad [], double * cs []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrlongvoidPtrlongdoublevoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ltfat_filterbankphasegrad_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtrPtr', 'doublePtrPtr', 'doublePtrPtr', 'long', 'longPtr', 'long', 'double', 'doublePtrPtr', 'doublePtrPtr', 'doublePtrPtr'};fcnNum=fcnNum+1;
% extern ltfat_dgt_ola_plan_d ltfat_dgt_ola_init_d ( const fftw_complex * g , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt bl , const ltfat_phaseconvention ptype , unsigned flags ); 
fcns.thunkname{fcnNum}='ltfat_dgt_ola_plan_dvoidPtrlonglonglonglonglongltfat_phaseconventionuint32Thunk';fcns.name{fcnNum}='ltfat_dgt_ola_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_dgt_ola_plan_d'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_ola_execute_d ( const ltfat_dgt_ola_plan_d plan , const fftw_complex * f , const ltfatInt L , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_ola_plan_dvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_ola_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_ola_plan_d', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_ola_done_d ( ltfat_dgt_ola_plan_d plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_ola_plan_dThunk';fcns.name{fcnNum}='ltfat_dgt_ola_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_ola_plan_d'};fcnNum=fcnNum+1;
% extern ltfat_dgtreal_ola_plan_d ltfat_dgtreal_ola_init_d ( const double * g , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt bl , const ltfat_phaseconvention ptype , unsigned flags ); 
fcns.thunkname{fcnNum}='ltfat_dgtreal_ola_plan_dvoidPtrlonglonglonglonglongltfat_phaseconventionuint32Thunk';fcns.name{fcnNum}='ltfat_dgtreal_ola_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_dgtreal_ola_plan_d'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'long', 'ltfat_phaseconvention', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_dgtreal_ola_execute_d ( const ltfat_dgtreal_ola_plan_d plan , const double * f , const ltfatInt L , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidltfat_dgtreal_ola_plan_dvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgtreal_ola_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgtreal_ola_plan_d', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgtreal_ola_done_d ( ltfat_dgtreal_ola_plan_d plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgtreal_ola_plan_dThunk';fcns.name{fcnNum}='ltfat_dgtreal_ola_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgtreal_ola_plan_d'};fcnNum=fcnNum+1;
% extern ltfat_dgt_shearola_plan_d ltfat_dgt_shearola_init_d ( const fftw_complex * g , const ltfatInt gl , const ltfatInt W , const ltfatInt a , const ltfatInt M , const ltfatInt s0 , const ltfatInt s1 , const ltfatInt br , const ltfatInt bl , unsigned flags ); 
fcns.thunkname{fcnNum}='ltfat_dgt_shearola_plan_dvoidPtrlonglonglonglonglonglonglonglonguint32Thunk';fcns.name{fcnNum}='ltfat_dgt_shearola_init_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ltfat_dgt_shearola_plan_d'; fcns.RHS{fcnNum}={'doublePtr', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'long', 'uint32'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_shearola_execute_d ( const ltfat_dgt_shearola_plan_d plan , const fftw_complex * f , const ltfatInt L , fftw_complex * cout ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_shearola_plan_dvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='ltfat_dgt_shearola_execute_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_shearola_plan_d', 'doublePtr', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% extern void ltfat_dgt_shearola_done_d ( ltfat_dgt_shearola_plan_d plan ); 
fcns.thunkname{fcnNum}='voidltfat_dgt_shearola_plan_dThunk';fcns.name{fcnNum}='ltfat_dgt_shearola_done_d'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ltfat_dgt_shearola_plan_d'};fcnNum=fcnNum+1;
structs.fftw_plan_s.members=struct('');
structs.fftwf_plan_s.members=struct('');
structs.ltfat_library_version.members=struct('version', 'cstring', 'build_date', 'cstring', 'major', 'int32', 'minor', 'int32', 'patch', 'int32');
structs.ltfat_memory_handler_t.members=struct('error0', ' void * (* malloc ) ( size_t n )', 'error1', ' void (* free ) ( void *)');
structs.ltfat_div_t.members=struct('quot', 'long', 'rem', 'long');
structs.fbreassOptOut.members=struct('repos', 'longPtrPtr', 'reposl', 'longPtr', 'reposlmax', 'longPtr', 'l', 'long');
structs.ltfat_dgt_long_plan_s.members=struct('');
structs.ltfat_idgt_long_plan_s.members=struct('');
structs.ltfat_dgt_fb_plan_s.members=struct('');
structs.ltfat_idgt_fb_plan_s.members=struct('');
structs.ltfat_gga_plan_struct_s.members=struct('');
structs.ltfat_chzt_plan_struct_s.members=struct('');
structs.ltfat_wfac_plan_s.members=struct('');
structs.ltfat_iwfac_plan_s.members=struct('');
structs.ltfat_dgt_long_plan_sc.members=struct('');
structs.ltfat_idgt_long_plan_sc.members=struct('');
structs.ltfat_dgt_fb_plan_sc.members=struct('');
structs.ltfat_idgt_fb_plan_sc.members=struct('');
structs.ltfat_gga_plan_struct_sc.members=struct('');
structs.ltfat_chzt_plan_struct_sc.members=struct('');
structs.ltfat_wfac_plan_sc.members=struct('');
structs.ltfat_iwfac_plan_sc.members=struct('');
structs.ltfat_dgtreal_long_plan_s.members=struct('');
structs.ltfat_idgtreal_long_plan_s.members=struct('');
structs.ltfat_dgtreal_fb_plan_s.members=struct('');
structs.ltfat_idgtreal_fb_plan_s.members=struct('');
structs.ltfat_dgt_multi_plan_s.members=struct('a', 'long', 'M', 'long', 'L', 'long', 'Lg', 'long', 'W', 'long', 'lt1', 'long', 'lt2', 'long', 'f', 'single#2Ptr', 'c_scratch', 'single#2Ptr', 'cout', 'single#2Ptr', 'mwin', 'single#2Ptr', 'c_rect', 'single#2Ptr', 'mod', 'single#2Ptr', 'rect_plan_array', 'ltfat_dgt_long_plan_scPtrPtr');
structs.ltfat_dgt_shear_plan_s.members=struct('a', 'long', 'M', 'long', 'L', 'long', 'W', 'long', 's0', 'long', 's1', 'long', 'br', 'long', 'p0', 'single#2Ptr', 'p1', 'single#2Ptr', 'fwork', 'single#2Ptr', 'gwork', 'single#2Ptr', 'c_rect', 'single#2Ptr', 'finalmod', 'single#2Ptr', 'f_plan', 'fftwf_plan_sPtr', 'g_plan', 'fftwf_plan_sPtr', 'rect_plan', 'ltfat_dgt_long_plan_scPtr', 'f', 'single#2Ptr', 'cout', 'single#2Ptr');
structs.ltfat_rtdgtreal_plan_s.members=struct('');
structs.ltfat_rtdgtreal_fifo_state_s.members=struct('');
structs.ltfat_rtidgtreal_fifo_state_s.members=struct('');
structs.ltfat_rtdgtreal_processor_state_s.members=struct('');
structs.ltfat_convsub_fft_plan_struct_s.members=struct('');
structs.ltfat_convsub_fftbl_plan_struct_s.members=struct('');
structs.ltfat_upconv_fft_plan_struct_s.members=struct('');
structs.ltfat_upconv_fftbl_plan_struct_s.members=struct('');
structs.ltfat_heapinttask_s.members=struct('');
structs.ltfat_dgt_ola_plan_s.members=struct('plan', 'ltfat_dgt_long_plan_scPtr', 'bl', 'long', 'gl', 'long', 'W', 'long', 'buf', 'single#2Ptr', 'gext', 'single#2Ptr', 'cbuf', 'single#2Ptr');
structs.ltfat_dgtreal_ola_plan_s.members=struct('plan', 'ltfat_dgtreal_long_plan_sPtr', 'bl', 'long', 'gl', 'long', 'W', 'long', 'buf', 'singlePtr', 'gext', 'singlePtr', 'cbuf', 'single#2Ptr');
structs.ltfat_dgt_shearola_plan_s.members=struct('plan', 'ltfat_dgt_shear_plan_s', 'bl', 'long', 'gl', 'long', 'W', 'long', 'buf', 'single#2Ptr', 'gext', 'single#2Ptr', 'cbuf', 'single#2Ptr');
structs.ltfat_dgt_long_plan_d.members=struct('');
structs.ltfat_idgt_long_plan_d.members=struct('');
structs.ltfat_dgt_fb_plan_d.members=struct('');
structs.ltfat_idgt_fb_plan_d.members=struct('');
structs.ltfat_gga_plan_struct_d.members=struct('');
structs.ltfat_chzt_plan_struct_d.members=struct('');
structs.ltfat_wfac_plan_d.members=struct('');
structs.ltfat_iwfac_plan_d.members=struct('');
structs.ltfat_dgt_long_plan_dc.members=struct('');
structs.ltfat_idgt_long_plan_dc.members=struct('');
structs.ltfat_dgt_fb_plan_dc.members=struct('');
structs.ltfat_idgt_fb_plan_dc.members=struct('');
structs.ltfat_gga_plan_struct_dc.members=struct('');
structs.ltfat_chzt_plan_struct_dc.members=struct('');
structs.ltfat_wfac_plan_dc.members=struct('');
structs.ltfat_iwfac_plan_dc.members=struct('');
structs.ltfat_dgtreal_long_plan_d.members=struct('');
structs.ltfat_idgtreal_long_plan_d.members=struct('');
structs.ltfat_dgtreal_fb_plan_d.members=struct('');
structs.ltfat_idgtreal_fb_plan_d.members=struct('');
structs.ltfat_dgt_multi_plan_d.members=struct('a', 'long', 'M', 'long', 'L', 'long', 'Lg', 'long', 'W', 'long', 'lt1', 'long', 'lt2', 'long', 'f', 'double#2Ptr', 'c_scratch', 'double#2Ptr', 'cout', 'double#2Ptr', 'mwin', 'double#2Ptr', 'c_rect', 'double#2Ptr', 'mod', 'double#2Ptr', 'rect_plan_array', 'ltfat_dgt_long_plan_dcPtrPtr');
structs.ltfat_dgt_shear_plan_d.members=struct('a', 'long', 'M', 'long', 'L', 'long', 'W', 'long', 's0', 'long', 's1', 'long', 'br', 'long', 'p0', 'double#2Ptr', 'p1', 'double#2Ptr', 'fwork', 'double#2Ptr', 'gwork', 'double#2Ptr', 'c_rect', 'double#2Ptr', 'finalmod', 'double#2Ptr', 'f_plan', 'fftw_plan_sPtr', 'g_plan', 'fftw_plan_sPtr', 'rect_plan', 'ltfat_dgt_long_plan_dcPtr', 'f', 'double#2Ptr', 'cout', 'double#2Ptr');
structs.ltfat_rtdgtreal_plan_d.members=struct('');
structs.ltfat_rtdgtreal_fifo_state_d.members=struct('');
structs.ltfat_rtidgtreal_fifo_state_d.members=struct('');
structs.ltfat_rtdgtreal_processor_state_d.members=struct('');
structs.ltfat_convsub_fft_plan_struct_d.members=struct('');
structs.ltfat_convsub_fftbl_plan_struct_d.members=struct('');
structs.ltfat_upconv_fft_plan_struct_d.members=struct('');
structs.ltfat_upconv_fftbl_plan_struct_d.members=struct('');
structs.ltfat_heapinttask_d.members=struct('');
structs.ltfat_dgt_ola_plan_d.members=struct('plan', 'ltfat_dgt_long_plan_dcPtr', 'bl', 'long', 'gl', 'long', 'W', 'long', 'buf', 'double#2Ptr', 'gext', 'double#2Ptr', 'cbuf', 'double#2Ptr');
structs.ltfat_dgtreal_ola_plan_d.members=struct('plan', 'ltfat_dgtreal_long_plan_dPtr', 'bl', 'long', 'gl', 'long', 'W', 'long', 'buf', 'doublePtr', 'gext', 'doublePtr', 'cbuf', 'double#2Ptr');
structs.ltfat_dgt_shearola_plan_d.members=struct('plan', 'ltfat_dgt_shear_plan_d', 'bl', 'long', 'gl', 'long', 'W', 'long', 'buf', 'double#2Ptr', 'gext', 'double#2Ptr', 'cbuf', 'double#2Ptr');
enuminfo.czt_ffthint=struct('CZT_NEXTFASTFFT',0,'CZT_NEXTPOW2',1);
enuminfo.fbreassHints=struct('REASS_DEFAULT',0,'REASS_NOTIMEWRAPAROUND',1);
enuminfo.ltfat_transformdirection=struct('LTFAT_FORWARD',0,'LTFAT_INVERSE',1);
enuminfo.dst_kind=struct('DSTI',7,'DSTIII',8,'DSTII',9,'DSTIV',10);
enuminfo.LTFAT_FIRWIN=struct('LTFAT_HANN',0,'LTFAT_HANNING',1,'LTFAT_NUTTALL10',2,'LTFAT_SQRTHANN',3,'LTFAT_COSINE',4,'LTFAT_SINE',5,'LTFAT_HAMMING',6,'LTFAT_NUTTALL01',7,'LTFAT_SQUARE',8,'LTFAT_RECT',9,'LTFAT_TRIA',10,'LTFAT_TRIANGULAR',11,'LTFAT_BARTLETT',12,'LTFAT_SQRTTRIA',13,'LTFAT_BLACKMAN',14,'LTFAT_BLACKMAN2',15,'LTFAT_NUTTALL',16,'LTFAT_NUTTALL12',17,'LTFAT_OGG',18,'LTFAT_ITERSINE',19,'LTFAT_NUTTALL20',20,'LTFAT_NUTTALL11',21,'LTFAT_NUTTALL02',22,'LTFAT_NUTTALL30',23,'LTFAT_NUTTALL21',24,'LTFAT_NUTTALL03',25);
enuminfo.ltfat_normalize_t=struct('LTFAT_NORMALIZE_NULL',0,'LTFAT_NORMALIZE_AREA',1,'LTFAT_NORMALIZE_1',1,'LTFAT_NORMALIZE_ENERGY',2,'LTFAT_NORMALIZE_2',2,'LTFAT_NORMALIZE_INF',3,'LTFAT_NORMALIZE_PEAK',3);
enuminfo.ltfat_phaseconvention=struct('LTFAT_FREQINV',0,'LTFAT_TIMEINV',1);
enuminfo.rtdgt_phasetype=struct('LTFAT_RTDGTPHASE_ZERO',0,'LTFAT_RTDGTPHASE_HALFSHIFT',1);
enuminfo.dct_kind=struct('DCTI',3,'DCTIII',4,'DCTII',5,'DCTIV',6);
enuminfo.ltfatExtType=struct('PER',0,'PERDEC',1,'PPD',2,'SYM',3,'EVEN',4,'SYMW',5,'ASYM',6,'ODD',7,'ASYMW',8,'SP0',9,'ZPD',10,'ZERO',11,'VALID',12,'BAD_TYPE',13);
enuminfo.ltfaterr_status=struct('LTFATERR_SUCCESS',0,'LTFATERR_FAILED',-1,'LTFATERR_NOMEM',-2,'LTFATERR_INITFAILED',-3,'LTFATERR_NULLPOINTER',-4,'LTFATERR_BADARG',-5,'LTFATERR_NOTPOSARG',-6,'LTFATERR_NOTINRANGE',-7,'LTFATERR_OVERFLOW',-8,'LTFATERR_UNDERFLOW',-9,'LTFATERR_CANNOTHAPPEN',-10,'LTFATERR_BADSIZE',-11,'LTFATERR_BADREQSIZE',-12,'LTFATERR_BADTRALEN',-99,'LTFATERR_NOTAFRAME',-100,'LTFATERR_NOTPAINLESS',-101);
enuminfo.ltfat_mask_element=struct('LTFAT_MASK_BELOWTOL',-1,'LTFAT_MASK_UNKNOWN',0,'LTFAT_MASK_KNOWN',1,'LTFAT_MASK_WENTNORTH',2,'LTFAT_MASK_WENTSOUTH',3,'LTFAT_MASK_WENTEAST',4,'LTFAT_MASK_WENTWEST',5,'LTFAT_MASK_STARTPOINT',6,'LTFAT_MASK_BORDERPOINT',7);
methodinfo=fcns;